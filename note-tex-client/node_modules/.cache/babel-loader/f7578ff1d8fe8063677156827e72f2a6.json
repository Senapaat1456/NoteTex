{"ast":null,"code":"var _jsxFileName = \"/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/NoteLine.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector, useStore } from 'react-redux';\nimport { beginEdit, endEdit, addNewLine } from './LineActions';\nimport './noteLine.css';\nexport function NoteLine(props) {\n  console.log(\"this line: \" + JSON.stringify(props.noteLine) + \", Important: \" + props.noteLine.lineContents);\n  const noteLine = props.noteLine;\n  const dispatch = useDispatch();\n  const [lineContents, setLineContents] = useState(noteLine.lineContents);\n  console.log(\"actual: \" + lineContents); //useEffect(() => doSth(lineContents))\n\n  const lineCount = props.lineCount;\n\n  const onBeginEdit = () => {\n    //alert(lineContents + \" , \" + noteLine.lineContents)\n    dispatch(beginEdit(noteLine.lineNumber));\n  };\n\n  const onEndEdit = typeOfExit => {\n    //alert(lineContents)\n    dispatch(endEdit({\n      lineNumber: noteLine.lineNumber,\n      lineContents: lineContents\n    })); //alert(lineContents)\n\n    if (lineContents !== \"\" && typeOfExit === \"ENTER\") {\n      dispatch(addNewLine(noteLine.lineNumber));\n    }\n  };\n\n  const onUpArrow = () => {\n    if (noteLine.lineNumber != 1) {\n      dispatch(endEdit({\n        lineNumber: noteLine.lineNumber,\n        lineContents: lineContents\n      }));\n      dispatch(beginEdit(noteLine.lineNumber - 1));\n    }\n  };\n\n  const onDownArrow = () => {\n    if (noteLine.lineNumber != lineCount) {\n      dispatch(endEdit({\n        lineNumber: noteLine.lineNumber,\n        lineContents: lineContents\n      }));\n      dispatch(beginEdit(noteLine.lineNumber + 1));\n    }\n  };\n\n  const processesKeyPress = keyCode => {\n    if (keyCode === 13) {\n      onEndEdit(\"ENTER\");\n    } else if (keyCode === 38) {\n      onUpArrow();\n    } else if (keyCode === 40) {\n      onDownArrow();\n    }\n  };\n\n  if (noteLine.isEditing) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"lineArea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"lineBox\",\n      value: lineContents,\n      onBlur: () => onEndEdit(\"CURSER\"),\n      onKeyDown: event => processesKeyPress(event.keyCode),\n      onChange: e => {\n        setLineContents(e.target.value);\n      },\n      ref: input => input && input.focus(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"lineArea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      onClick: onBeginEdit,\n      className: \"noteText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, noteLine.lineContents));\n  }\n}","map":{"version":3,"sources":["/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/NoteLine.js"],"names":["React","useEffect","useState","useDispatch","useSelector","useStore","beginEdit","endEdit","addNewLine","NoteLine","props","console","log","JSON","stringify","noteLine","lineContents","dispatch","setLineContents","lineCount","onBeginEdit","lineNumber","onEndEdit","typeOfExit","onUpArrow","onDownArrow","processesKeyPress","keyCode","isEditing","event","e","target","value","input","focus"],"mappings":"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","sourcesContent":["import React, {useEffect,useState} from 'react';\nimport {useDispatch, useSelector, useStore} from 'react-redux';\nimport {beginEdit, endEdit, addNewLine} from './LineActions'\nimport './noteLine.css';\n\nexport function NoteLine(props){\n  console.log(\"this line: \" + JSON.stringify(props.noteLine) + \", Important: \" + props.noteLine.lineContents)\n  const noteLine = props.noteLine;\n  const dispatch = useDispatch();\n  const [lineContents, setLineContents] = useState(noteLine.lineContents);\n  console.log(\"actual: \" + lineContents)\n  //useEffect(() => doSth(lineContents))\n  const lineCount = props.lineCount\n\n  const onBeginEdit = () =>{\n    //alert(lineContents + \" , \" + noteLine.lineContents)\n    dispatch(beginEdit(noteLine.lineNumber));\n  }\n\n  const onEndEdit = (typeOfExit) =>{\n    //alert(lineContents)\n    dispatch(endEdit({lineNumber:noteLine.lineNumber, lineContents:lineContents}));\n    //alert(lineContents)\n    if(lineContents !== \"\" && typeOfExit === \"ENTER\"){\n      dispatch(addNewLine(noteLine.lineNumber));\n    }\n  }\n\nconst onUpArrow = () => {\n  if(noteLine.lineNumber != 1){\n    dispatch(endEdit({lineNumber:noteLine.lineNumber, lineContents:lineContents}));\n    dispatch(beginEdit(noteLine.lineNumber - 1));\n  }\n}\n\nconst onDownArrow = () => {\n  if(noteLine.lineNumber != lineCount){\n    dispatch(endEdit({lineNumber:noteLine.lineNumber, lineContents:lineContents}));\n    dispatch(beginEdit(noteLine.lineNumber + 1));\n  }\n}\n\n\nconst processesKeyPress = (keyCode) =>{\n  if(keyCode === 13){\n    onEndEdit(\"ENTER\");\n  }\n  else if(keyCode === 38){\n    onUpArrow();\n  }\n  else if(keyCode === 40){\n    onDownArrow();\n  }\n\n}\n\n  if(noteLine.isEditing){\n    return(\n      <span className=\"lineArea\">\n        <input className=\"lineBox\" value={lineContents} onBlur={() => onEndEdit(\"CURSER\")} onKeyDown={event => processesKeyPress(event.keyCode)} onChange={e => {setLineContents(e.target.value)}} ref={input => input && input.focus()}/>\n      </span>\n    )\n  }else{\n    return(\n      <span className=\"lineArea\">\n        <div onClick={onBeginEdit} className=\"noteText\">\n          {noteLine.lineContents}\n        </div>\n      </span>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}