{"ast":null,"code":"var _jsxFileName = \"/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/NoteLine.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector, useStore } from 'react-redux';\nimport { beginEdit, endEdit, addNewLine } from './LineActions';\nimport './noteLine.css'; //import {parseLine} from './lineParser'\n\nexport function NoteLine(props) {\n  //console.log(\"this line: \" + JSON.stringify(props.noteLine) + \", Important: \" + props.noteLine.lineContents)\n  const noteLine = props.noteLine;\n  const dispatch = useDispatch();\n  const [lineContents, setLineContents] = useState(noteLine.lineContents); //console.log(\"actual: \" + lineContents)\n  //useEffect(() => doSth(lineContents))\n\n  const lineCount = props.lineCount;\n\n  const onBeginEdit = () => {\n    //alert(lineContents + \" , \" + noteLine.lineContents)\n    dispatch(beginEdit(noteLine.lineNumber));\n  };\n\n  const onEndEdit = typeOfExit => {\n    //alert(lineContents)\n    dispatch(endEdit({\n      lineNumber: noteLine.lineNumber,\n      lineContents: lineContents\n    })); //alert(lineContents)\n\n    if (lineContents !== \"\" && typeOfExit === \"ENTER\") {\n      dispatch(addNewLine(noteLine.lineNumber));\n    }\n  };\n\n  const onUpArrow = () => {\n    if (noteLine.lineNumber != 1) {\n      dispatch(endEdit({\n        lineNumber: noteLine.lineNumber,\n        lineContents: lineContents\n      }));\n      dispatch(beginEdit(noteLine.lineNumber - 1));\n    }\n  };\n\n  const onDownArrow = () => {\n    if (noteLine.lineNumber != lineCount) {\n      dispatch(endEdit({\n        lineNumber: noteLine.lineNumber,\n        lineContents: lineContents\n      }));\n      dispatch(beginEdit(noteLine.lineNumber + 1));\n    }\n  };\n\n  function bodyKeyHandler(o, e) {\n    var c = e.ctrlKey;\n    var k = e.which;\n\n    if (e.ctrlKey) {\n      switch (k) {\n        case 17:\n          e.preventDefault();\n          o.stopPropagation();\n          break;\n      }\n    }\n  }\n\n  function editorKeyHandler(e) {\n    var c = e.ctrlKey;\n    var k = e.which;\n\n    if (c) {\n      switch (k) {\n        case 17:\n          document.execCommand(\"bold\");\n          break;\n      }\n    }\n  }\n\n  const processesKeyPress = keyCode => {\n    if (keyCode === 13) {\n      onEndEdit(\"ENTER\");\n    } else if (keyCode === 38) {\n      onUpArrow();\n    } else if (keyCode === 40) {\n      onDownArrow();\n    }\n  };\n\n  const input = 'This **textbolded** a header';\n\n  if (noteLine.isEditing) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"lineArea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, \">\", /*#__PURE__*/React.createElement(\"input\", {\n      className: \"lineBox\",\n      contentEditable: \"true\",\n      value: lineContents,\n      onBlur: () => onEndEdit(\"CURSER\"),\n      onKeyDown: \"editorKeyHandler(event)\",\n      onKeyDown: event => processesKeyPress(event.keyCode),\n      onChange: e => {\n        setLineContents(e.target.value);\n      },\n      ref: input => input && input.focus(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 10\n      }\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"lineArea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }\n    }, parseLine(noteLine.lineContents));\n  } //\n  //<ReactMarkdown source={input}/>\n\n\n  function parseLine(lineContents) {\n    var parsedLineContents = lineContents; //parsing header info\n\n    var fontSizeArray = [12, 24, 20, 16];\n    var headerLevel = 0;\n\n    if (parsedLineContents[0] === '#') {\n      headerLevel = 1;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n\n    if (parsedLineContents[0] === '#') {\n      headerLevel = 2;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n\n    if (parsedLineContents[0] === '#') {\n      headerLevel = 3;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n\n    do {\n      var tracker = parsedLineContents;\n    } while (tracker != parsedLineContents);\n\n    parsedLineContents = parsedLineContents.replace(\"**\", \"<b>\");\n    var finalStructure, x;\n    [finalStructure, x] = markdownParser(parsedLineContents, null);\n    var lineOutput = /*#__PURE__*/React.createElement(\"div\", {\n      onClick: onBeginEdit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 22\n      }\n    }, \" > \", /*#__PURE__*/React.createElement(\"span\", {\n      onClick: onBeginEdit,\n      style: {\n        fontSize: fontSizeArray[headerLevel]\n      },\n      className: \"noteText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 52\n      }\n    }, \" \", finalStructure, \" \"), \" \");\n    return lineOutput;\n  }\n\n  function markdownParser(lineContents, endSymbol) {\n    var text = lineContents;\n    var stack = [];\n    var finalStructure;\n\n    while (lineContents.length > 0 && lineContents != endSymbol) {\n      stack.push(lineContents[0]);\n      lineContents = lineContents.substr(1);\n\n      if (stack[stack.length - 1] === '#') {\n        stack.pop(stack.length - 1);\n        var recursiveStructure;\n        [recursiveStructure, lineContents] = markdownParser(lineContents, '#');\n        finalStructure = /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 26\n          }\n        }, \" \", finalStructure, \" \", /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 50\n          }\n        }, \" \", stack, \" \"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 73\n          }\n        }, \" \", recursiveStructure, \" \"), \" \");\n        stack = [];\n      }\n\n      if (lineContents == null || lineContents.length === 0) {\n        return [/*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }\n        }, \" \", stack, \" \"), null];\n      } else {\n        if (endSymbol === '#') return [/*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 17\n          }\n        }, \"finalStructure\"), lineContents];\n      }\n    }\n\n    return ['', ''];\n  }\n  /*function markdownParserRecursive(lineContents,endSymbol){\n    var returnStack = []\n    while(lineContents.length > 0 && lineContents[0] != endSymbol){\n     }\n  }*/\n\n}","map":{"version":3,"sources":["/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/NoteLine.js"],"names":["React","useEffect","useState","useDispatch","useSelector","useStore","beginEdit","endEdit","addNewLine","NoteLine","props","noteLine","dispatch","lineContents","setLineContents","lineCount","onBeginEdit","lineNumber","onEndEdit","typeOfExit","onUpArrow","onDownArrow","bodyKeyHandler","o","e","c","ctrlKey","k","which","preventDefault","stopPropagation","editorKeyHandler","document","execCommand","processesKeyPress","keyCode","input","isEditing","event","target","value","focus","parseLine","parsedLineContents","fontSizeArray","headerLevel","substr","tracker","replace","finalStructure","x","markdownParser","lineOutput","fontSize","endSymbol","text","stack","length","push","pop","recursiveStructure"],"mappings":"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","sourcesContent":["import React, {useEffect,useState} from 'react';\nimport {useDispatch, useSelector, useStore} from 'react-redux';\nimport {beginEdit, endEdit, addNewLine} from './LineActions'\nimport './noteLine.css';\n//import {parseLine} from './lineParser'\n\nexport function NoteLine(props){\n  //console.log(\"this line: \" + JSON.stringify(props.noteLine) + \", Important: \" + props.noteLine.lineContents)\n  const noteLine = props.noteLine;\n  const dispatch = useDispatch();\n  const [lineContents, setLineContents] = useState(noteLine.lineContents);\n  //console.log(\"actual: \" + lineContents)\n  //useEffect(() => doSth(lineContents))\n  const lineCount = props.lineCount\n\n  const onBeginEdit = () =>{\n    //alert(lineContents + \" , \" + noteLine.lineContents)\n    dispatch(beginEdit(noteLine.lineNumber));\n  }\n\n  const onEndEdit = (typeOfExit) =>{\n    //alert(lineContents)\n    dispatch(endEdit({lineNumber:noteLine.lineNumber, lineContents:lineContents}));\n    //alert(lineContents)\n    if(lineContents !== \"\" && typeOfExit === \"ENTER\"){\n      dispatch(addNewLine(noteLine.lineNumber));\n    }\n  }\n\nconst onUpArrow = () => {\n  if(noteLine.lineNumber != 1){\n    dispatch(endEdit({lineNumber:noteLine.lineNumber, lineContents:lineContents}));\n    dispatch(beginEdit(noteLine.lineNumber - 1));\n  }\n}\n\nconst onDownArrow = () => {\n  if(noteLine.lineNumber != lineCount){\n    dispatch(endEdit({lineNumber:noteLine.lineNumber, lineContents:lineContents}));\n    dispatch(beginEdit(noteLine.lineNumber + 1));\n  }\n}\n\nfunction bodyKeyHandler(o,e) {\n    var c = e.ctrlKey;\n    var k = e.which;\n    if (e.ctrlKey) {\n        switch ( k ) {\n            case 17:\n                e.preventDefault();\n                o.stopPropagation();\n                break;\n        }\n    }\n}\n\nfunction editorKeyHandler(e) {\n    var c = e.ctrlKey;\n    var k = e.which;\n    if (c) {\n        switch ( k ) {\n            case 17:\n                document.execCommand(\"bold\");\n                break;\n        }\n    }\n}\n\n\nconst processesKeyPress = (keyCode) =>{\n  if(keyCode === 13){\n    onEndEdit(\"ENTER\");\n  }\n  else if(keyCode === 38){\n    onUpArrow();\n  }\n  else if(keyCode === 40){\n    onDownArrow();\n  }\n\n}\n  const input = 'This **textbolded** a header';\n  if(noteLine.isEditing){\n    return(\n      <span className=\"lineArea\">\n        ><input className=\"lineBox\" contentEditable=\"true\"  value={lineContents} onBlur={() => onEndEdit(\"CURSER\")} onKeyDown=\"editorKeyHandler(event)\" onKeyDown={event => processesKeyPress(event.keyCode)} onChange={e => {setLineContents(e.target.value)}} ref={input => input && input.focus()}/>\n      </span>\n    )\n  }else{\n    return(\n      <span className=\"lineArea\">\n        {parseLine(noteLine.lineContents)}\n      </span>\n    )\n  }\n  //\n  //<ReactMarkdown source={input}/>\n\n\n  function parseLine(lineContents){\n    var parsedLineContents = lineContents;\n\n    //parsing header info\n    var fontSizeArray = [12,24,20,16]\n    var headerLevel = 0;\n    if(parsedLineContents[0] === '#'){\n      headerLevel = 1;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n    if(parsedLineContents[0] === '#'){\n      headerLevel = 2;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n    if(parsedLineContents[0] === '#'){\n      headerLevel = 3;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n\n\n    do{\n      var tracker = parsedLineContents;\n\n    }while(tracker != parsedLineContents)\n\n\n    parsedLineContents = parsedLineContents.replace(\"**\" , \"<b>\");\n    var finalStructure, x;\n    [finalStructure, x] = markdownParser(parsedLineContents,null);\n    var lineOutput = <div onClick={onBeginEdit}> > <span onClick={onBeginEdit} style={{fontSize:fontSizeArray[headerLevel]}} className =\"noteText\"> {finalStructure} </span> </div>\n\n\n\n    return lineOutput;\n  }\n\n  function markdownParser(lineContents, endSymbol){\n    var text = lineContents;\n    var stack = [];\n    var finalStructure;\n\n    while(lineContents.length > 0 && lineContents != endSymbol){\n      stack.push(lineContents[0]);\n      lineContents  = lineContents.substr(1);\n      if(stack[stack.length - 1] === '#'){\n        stack.pop(stack.length - 1)\n        var recursiveStructure;\n        [recursiveStructure, lineContents] = markdownParser(lineContents,'#');\n        finalStructure = <span> {finalStructure} <span> {stack} </span> <span> {recursiveStructure} </span> </span>;\n        stack = [];\n      }\n\n      if(lineContents == null || lineContents.length === 0){\n        return [<span> {stack} </span>,null];\n      }else{\n        if(endSymbol === '#')\n        return [<b>finalStructure</b>,lineContents];\n      }\n\n    }\n    return ['','']\n}\n\n  /*function markdownParserRecursive(lineContents,endSymbol){\n    var returnStack = []\n    while(lineContents.length > 0 && lineContents[0] != endSymbol){\n\n    }\n  }*/\n\n}\n"]},"metadata":{},"sourceType":"module"}