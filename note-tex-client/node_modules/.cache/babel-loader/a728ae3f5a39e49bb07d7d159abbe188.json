{"ast":null,"code":"import { Action } from './LineActions';\nconst initialState = {\n  lineCount: 0,\n  noteLines: [],\n  currentLine: {\n    lineContents: \"temp\"\n  }\n};\n\nfunction noteLinesReducer(noteLinesArray, action) {\n  switch (action.type) {\n    case Action.BeginEdit:\n      return noteLinesArray.map(line => {\n        alert(\"End\");\n\n        if (line.lineNumber === action.payload) {\n          alert(\"here  \");\n          return { ...line,\n            isEditing: true\n          };\n        } else {\n          return line;\n        }\n      });\n\n    case Action.EndEdit:\n      return noteLinesArray.map(line => {\n        if (line.lineNumber === action.payload.lineNumber) {\n          return action.payload;\n        } else {\n          return line;\n        }\n      });\n\n    case Action.LoadLine:\n      return [action.payload, ...noteLinesArray];\n\n    case Action.AddNewLine:\n      //console.log(\"Old: \"+ JSON.stringify(noteLinesArray))\n      const oldList = noteLinesArray.map(line => {\n        //console.log(\"a Line: \"+ JSON.stringify(line))\n        if (line.lineNumber <= action.payload) {\n          return {\n            lineContents: line.lineContents + \"\",\n            lineNumber: line.lineNumber,\n            marked: \"under\"\n          };\n        } else {\n          return {\n            lineContents: line.lineContents + \"\",\n            lineNumber: line.lineNumber + 1,\n            marked: \"Over\"\n          };\n        }\n      });\n      const temp = {\n        lineNumber: action.payload + 1,\n        lineContents: \"\",\n        isEditing: true,\n        marked: \"new\"\n      }; //console.log(\"New: \"+ JSON.stringify([...oldList, temp].sort((a,b) => {return a.lineNumber - b.lineNumber})))\n\n      return [...oldList, temp].sort((a, b) => {\n        return a.lineNumber - b.lineNumber;\n      });\n\n    case Action.RemoveLine:\n      //console.log(\"Old: \"+ JSON.stringify(noteLinesArray))\n      const newList = noteLinesArray.filter(line => line.lineNumber != action.payload.lineNumber).map(line => {\n        //console.log(\"a Line: \"+ JSON.stringify(line))\n        if (line.lineNumber <= action.payload) {\n          return {\n            lineContents: line.lineContents + \"\",\n            lineNumber: line.lineNumber,\n            marked: \"under\"\n          };\n        } else {\n          return {\n            lineContents: line.lineContents + \"\",\n            lineNumber: line.lineNumber - 1,\n            marked: \"Over\"\n          };\n        }\n      }); //console.log(\"New: \"+ JSON.stringify([...oldList, temp].sort((a,b) => {return a.lineNumber - b.lineNumber})))\n\n      return newList.sort((a, b) => {\n        return a.lineNumber - b.lineNumber;\n      });\n\n    default:\n      return noteLinesArray;\n  }\n}\n\nfunction lineCountReducer(lineCountVar, action) {\n  switch (action.type) {\n    case Action.LoadLine:\n      return lineCountVar + 1;\n\n    case Action.AddNewLine:\n      return lineCountVar + 1;\n\n    case Action.RemoveLine:\n      return lineCountVar - 1;\n\n    default:\n      return lineCountVar;\n  }\n}\n\nfunction reducer(state = initialState, action) {\n  return {\n    lineCount: lineCountReducer(state.lineCount, action),\n    noteLines: noteLinesReducer(state.noteLines, action)\n  };\n}\n\nexport default reducer;","map":{"version":3,"sources":["/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/LineReducer.js"],"names":["Action","initialState","lineCount","noteLines","currentLine","lineContents","noteLinesReducer","noteLinesArray","action","type","BeginEdit","map","line","alert","lineNumber","payload","isEditing","EndEdit","LoadLine","AddNewLine","oldList","marked","temp","sort","a","b","RemoveLine","newList","filter","lineCountReducer","lineCountVar","reducer","state"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,eAArB;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,CADQ;AAEnBC,EAAAA,SAAS,EAAE,EAFQ;AAGnBC,EAAAA,WAAW,EAAE;AAACC,IAAAA,YAAY,EAAC;AAAd;AAHM,CAArB;;AAMA,SAASC,gBAAT,CAA0BC,cAA1B,EAA0CC,MAA1C,EAAiD;AAC/C,UAAQA,MAAM,CAACC,IAAf;AAGE,SAAKT,MAAM,CAACU,SAAZ;AACE,aAAOH,cAAc,CAACI,GAAf,CAAmBC,IAAI,IAAG;AAC/BC,QAAAA,KAAK,CAAC,KAAD,CAAL;;AACA,YAAGD,IAAI,CAACE,UAAL,KAAoBN,MAAM,CAACO,OAA9B,EAAsC;AACpCF,UAAAA,KAAK,CAAC,QAAD,CAAL;AACA,iBAAM,EAAC,GAAGD,IAAJ;AAAUI,YAAAA,SAAS,EAAC;AAApB,WAAN;AACD,SAHD,MAII;AACF,iBAAOJ,IAAP;AACD;AACF,OATM,CAAP;;AAYF,SAAKZ,MAAM,CAACiB,OAAZ;AACE,aAAOV,cAAc,CAACI,GAAf,CAAmBC,IAAI,IAAG;AAC5B,YAAGA,IAAI,CAACE,UAAL,KAAoBN,MAAM,CAACO,OAAP,CAAeD,UAAtC,EAAiD;AAC/C,iBAAON,MAAM,CAACO,OAAd;AACD,SAFD,MAGI;AACF,iBAAOH,IAAP;AACD;AACF,OAPG,CAAP;;AAWF,SAAKZ,MAAM,CAACkB,QAAZ;AACE,aAAO,CAACV,MAAM,CAACO,OAAR,EAAiB,GAAGR,cAApB,CAAP;;AAGF,SAAKP,MAAM,CAACmB,UAAZ;AACE;AACA,YAAMC,OAAO,GAAGb,cAAc,CAACI,GAAf,CAAmBC,IAAI,IAAG;AAExC;AAEA,YAAGA,IAAI,CAACE,UAAL,IAAmBN,MAAM,CAACO,OAA7B,EAAqC;AAEnC,iBAAO;AAACV,YAAAA,YAAY,EAACO,IAAI,CAACP,YAAL,GAAkB,EAAhC;AAAoCS,YAAAA,UAAU,EAACF,IAAI,CAACE,UAApD;AAAgEO,YAAAA,MAAM,EAAC;AAAvE,WAAP;AAED,SAJD,MAKI;AAEF,iBAAM;AAAChB,YAAAA,YAAY,EAACO,IAAI,CAACP,YAAL,GAAkB,EAAhC;AAAoCS,YAAAA,UAAU,EAACF,IAAI,CAACE,UAAL,GAAgB,CAA/D;AAAkEO,YAAAA,MAAM,EAAC;AAAzE,WAAN;AAED;AACF,OAde,CAAhB;AAeA,YAAMC,IAAI,GAAG;AAACR,QAAAA,UAAU,EAACN,MAAM,CAACO,OAAP,GAAe,CAA3B;AAA8BV,QAAAA,YAAY,EAAC,EAA3C;AAA+CW,QAAAA,SAAS,EAAC,IAAzD;AAA+DK,QAAAA,MAAM,EAAC;AAAtE,OAAb,CAjBF,CAkBE;;AACA,aAAO,CAAC,GAAGD,OAAJ,EAAaE,IAAb,EAAmBC,IAAnB,CAAwB,CAACC,CAAD,EAAGC,CAAH,KAAS;AAAC,eAAOD,CAAC,CAACV,UAAF,GAAeW,CAAC,CAACX,UAAxB;AAAmC,OAArE,CAAP;;AAGF,SAAKd,MAAM,CAAC0B,UAAZ;AACE;AACA,YAAMC,OAAO,GAAGpB,cAAc,CAACqB,MAAf,CAAsBhB,IAAI,IAAIA,IAAI,CAACE,UAAL,IAAmBN,MAAM,CAACO,OAAP,CAAeD,UAAhE,EAA4EH,GAA5E,CAAgFC,IAAI,IAAG;AAErG;AAEA,YAAGA,IAAI,CAACE,UAAL,IAAmBN,MAAM,CAACO,OAA7B,EAAqC;AAEnC,iBAAO;AAACV,YAAAA,YAAY,EAACO,IAAI,CAACP,YAAL,GAAkB,EAAhC;AAAoCS,YAAAA,UAAU,EAACF,IAAI,CAACE,UAApD;AAAgEO,YAAAA,MAAM,EAAC;AAAvE,WAAP;AAED,SAJD,MAKI;AAEF,iBAAM;AAAChB,YAAAA,YAAY,EAACO,IAAI,CAACP,YAAL,GAAkB,EAAhC;AAAoCS,YAAAA,UAAU,EAACF,IAAI,CAACE,UAAL,GAAgB,CAA/D;AAAkEO,YAAAA,MAAM,EAAC;AAAzE,WAAN;AAED;AACF,OAde,CAAhB,CAFF,CAiBE;;AACA,aAAOM,OAAO,CAACJ,IAAR,CAAa,CAACC,CAAD,EAAGC,CAAH,KAAS;AAAC,eAAOD,CAAC,CAACV,UAAF,GAAeW,CAAC,CAACX,UAAxB;AAAmC,OAA1D,CAAP;;AAEF;AACE,aAAOP,cAAP;AA3EJ;AA8ED;;AAED,SAASsB,gBAAT,CAA0BC,YAA1B,EAAwCtB,MAAxC,EAA+C;AAC7C,UAAQA,MAAM,CAACC,IAAf;AAGE,SAAKT,MAAM,CAACkB,QAAZ;AACE,aAAQY,YAAY,GAAC,CAArB;;AAGF,SAAK9B,MAAM,CAACmB,UAAZ;AACE,aAAQW,YAAY,GAAC,CAArB;;AAGF,SAAK9B,MAAM,CAAC0B,UAAZ;AACE,aAAQI,YAAY,GAAC,CAArB;;AAGF;AACE,aAAOA,YAAP;AAhBJ;AAkBD;;AAED,SAASC,OAAT,CAAiBC,KAAK,GAAG/B,YAAzB,EAAuCO,MAAvC,EAA8C;AAC1C,SAAM;AACJN,IAAAA,SAAS,EAAE2B,gBAAgB,CAACG,KAAK,CAAC9B,SAAP,EAAkBM,MAAlB,CADvB;AAEJL,IAAAA,SAAS,EAAEG,gBAAgB,CAAC0B,KAAK,CAAC7B,SAAP,EAAkBK,MAAlB;AAFvB,GAAN;AAIH;;AACD,eAAeuB,OAAf","sourcesContent":["import {Action} from './LineActions';\nconst initialState = {\n  lineCount: 0,\n  noteLines: [],\n  currentLine: {lineContents:\"temp\"},\n}\n\nfunction noteLinesReducer(noteLinesArray, action){\n  switch (action.type) {\n\n\n    case Action.BeginEdit:\n      return noteLinesArray.map(line =>{\n        alert(\"End\")\n        if(line.lineNumber === action.payload){\n          alert(\"here  \")\n          return{...line, isEditing:true};\n        }\n        else{\n          return line;\n        }\n      });\n\n\n    case Action.EndEdit:\n      return noteLinesArray.map(line =>{\n           if(line.lineNumber === action.payload.lineNumber){\n             return action.payload;\n           }\n           else{\n             return line;\n           }\n         });\n\n\n\n    case Action.LoadLine:\n      return [action.payload, ...noteLinesArray]\n\n\n    case Action.AddNewLine:\n      //console.log(\"Old: \"+ JSON.stringify(noteLinesArray))\n      const oldList = noteLinesArray.map(line =>{\n\n        //console.log(\"a Line: \"+ JSON.stringify(line))\n\n        if(line.lineNumber <= action.payload){\n\n          return {lineContents:line.lineContents+\"\", lineNumber:line.lineNumber, marked:\"under\"}\n\n        }\n        else{\n\n          return{lineContents:line.lineContents+\"\", lineNumber:line.lineNumber+1, marked:\"Over\"}\n\n        }\n      })\n      const temp = {lineNumber:action.payload+1, lineContents:\"\", isEditing:true, marked:\"new\"}\n      //console.log(\"New: \"+ JSON.stringify([...oldList, temp].sort((a,b) => {return a.lineNumber - b.lineNumber})))\n      return [...oldList, temp].sort((a,b) => {return a.lineNumber - b.lineNumber});\n\n\n    case Action.RemoveLine:\n      //console.log(\"Old: \"+ JSON.stringify(noteLinesArray))\n      const newList = noteLinesArray.filter(line => line.lineNumber != action.payload.lineNumber).map(line =>{\n\n        //console.log(\"a Line: \"+ JSON.stringify(line))\n\n        if(line.lineNumber <= action.payload){\n\n          return {lineContents:line.lineContents+\"\", lineNumber:line.lineNumber, marked:\"under\"}\n\n        }\n        else{\n\n          return{lineContents:line.lineContents+\"\", lineNumber:line.lineNumber-1, marked:\"Over\"}\n\n        }\n      })\n      //console.log(\"New: \"+ JSON.stringify([...oldList, temp].sort((a,b) => {return a.lineNumber - b.lineNumber})))\n      return newList.sort((a,b) => {return a.lineNumber - b.lineNumber});\n\n    default:\n      return noteLinesArray;\n\n  }\n}\n\nfunction lineCountReducer(lineCountVar, action){\n  switch (action.type) {\n\n\n    case Action.LoadLine:\n      return (lineCountVar+1);\n\n\n    case Action.AddNewLine:\n      return (lineCountVar+1);\n\n\n    case Action.RemoveLine:\n      return (lineCountVar-1)\n\n\n    default:\n      return lineCountVar;\n  }\n}\n\nfunction reducer(state = initialState, action){\n    return{\n      lineCount: lineCountReducer(state.lineCount, action),\n      noteLines: noteLinesReducer(state.noteLines, action)\n    };\n}\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}