{"ast":null,"code":"var _jsxFileName = \"/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/NoteLine.js\";\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { beginEdit, endEdit, addNewLine } from './LineActions';\nexport function NoteLine(props) {\n  const noteLine = props.noteLine;\n  const dispatch = useDispatch();\n  const [lineContents, setLineContents] = useState(noteLine.lineContents);\n  const [lineCount, setlineCount] = useState(props.lineCount);\n\n  const onBeginEdit = () => {\n    dispatch(beginEdit(noteLine));\n  };\n\n  const onEndEdit = keyCode => {\n    if (keyCode === 13) {\n      dispatch(endEdit({\n        lineNumber: noteLine.lineNumber,\n        lineContents: lineContents\n      }));\n\n      if (noteLine.lineNumber === lineCount && lineContents !== \"\") {\n        dispatch(addNewLine(lineCount));\n      }\n    }\n  };\n\n  if (noteLine.isEditing) {\n    return /*#__PURE__*/React.createElement(\"textarea\", {\n      value: lineContents,\n      onKeyDown: event => onEndEdit(event.keyCode),\n      onChange: e => {\n        setLineContents(e.target.value);\n      },\n      classname: \"lineBox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      onClick: onBeginEdit,\n      className: \"NoteLine\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }, lineContents, \", Line Number: \", lineCount);\n  }\n}","map":{"version":3,"sources":["/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/NoteLine.js"],"names":["React","useState","useDispatch","beginEdit","endEdit","addNewLine","NoteLine","props","noteLine","dispatch","lineContents","setLineContents","lineCount","setlineCount","onBeginEdit","onEndEdit","keyCode","lineNumber","isEditing","event","e","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,SAAR,EAAmBC,OAAnB,EAA4BC,UAA5B,QAA6C,eAA7C;AAEA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAwB;AAC7B,QAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAvB;AACA,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAACO,QAAQ,CAACE,YAAV,CAAhD;AACA,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAACM,KAAK,CAACK,SAAP,CAA1C;;AAEA,QAAME,WAAW,GAAG,MAAK;AACvBL,IAAAA,QAAQ,CAACN,SAAS,CAACK,QAAD,CAAV,CAAR;AACD,GAFD;;AAIA,QAAMO,SAAS,GAAIC,OAAD,IAAY;AAC5B,QAAGA,OAAO,KAAK,EAAf,EAAkB;AAChBP,MAAAA,QAAQ,CAACL,OAAO,CAAC;AAACa,QAAAA,UAAU,EAACT,QAAQ,CAACS,UAArB;AAAiCP,QAAAA,YAAY,EAACA;AAA9C,OAAD,CAAR,CAAR;;AACA,UAAGF,QAAQ,CAACS,UAAT,KAAwBL,SAAxB,IAAqCF,YAAY,KAAK,EAAzD,EAA4D;AAC1DD,QAAAA,QAAQ,CAACJ,UAAU,CAACO,SAAD,CAAX,CAAR;AACD;AACF;AACF,GAPD;;AASA,MAAGJ,QAAQ,CAACU,SAAZ,EAAsB;AACpB,wBACE;AAAU,MAAA,KAAK,EAAER,YAAjB;AAA+B,MAAA,SAAS,EAAES,KAAK,IAAIJ,SAAS,CAACI,KAAK,CAACH,OAAP,CAA5D;AAA6E,MAAA,QAAQ,EAAEI,CAAC,IAAI;AAACT,QAAAA,eAAe,CAACS,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf;AAAgC,OAA7H;AAA+H,MAAA,SAAS,EAAC,SAAzI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD,GAJD,MAIK;AACH,wBACE;AAAQ,MAAA,OAAO,EAAER,WAAjB;AAA8B,MAAA,SAAS,EAAC,UAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGJ,YADH,qBACgCE,SADhC,CADF;AAKD;AACF","sourcesContent":["import React, {useState} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {beginEdit, endEdit, addNewLine} from './LineActions'\n\nexport function NoteLine(props){\n  const noteLine = props.noteLine;\n  const dispatch = useDispatch();\n  const [lineContents, setLineContents] = useState(noteLine.lineContents);\n  const [lineCount, setlineCount] = useState(props.lineCount);\n\n  const onBeginEdit = () =>{\n    dispatch(beginEdit(noteLine));\n  }\n\n  const onEndEdit = (keyCode) =>{\n    if(keyCode === 13){\n      dispatch(endEdit({lineNumber:noteLine.lineNumber, lineContents:lineContents}));\n      if(noteLine.lineNumber === lineCount && lineContents !== \"\"){\n        dispatch(addNewLine(lineCount))\n      }\n    }\n  }\n\n  if(noteLine.isEditing){\n    return(\n      <textarea value={lineContents} onKeyDown={event => onEndEdit(event.keyCode)} onChange={e => {setLineContents(e.target.value)}} classname=\"lineBox\"/>\n    )\n  }else{\n    return(\n      <button onClick={onBeginEdit} className=\"NoteLine\">\n        {lineContents}, Line Number: {lineCount}\n      </button>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}