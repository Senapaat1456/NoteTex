{"ast":null,"code":"import React, { useState, getState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { checkForErrors } from './UserActions';\nexport const LineAction = Object.freeze({\n  StartEdit: 'StartEdit',\n  EndEdit: 'EndEdit',\n  LoadLine: 'LoadLine',\n  IncrementLineCount: 'IncrementLineCount',\n  AddNewLine: 'AddNewLine',\n  RemoveLine: 'removeLine'\n});\nconst host = 'http://websystems.senapatiratne.com:1443';\nexport function startEdit(lineNumber) {\n  return {\n    type: LineAction.StartEdit,\n    payload: lineNumber\n  };\n}\nexport function beginEndEdit(noteLine, noteLines, currentLineCount, currentNoteSheet_id, currentUserName) {\n  if (currentUserName == null || currentUserName === \"\") {\n    alert(\"Not here\");\n    return dispatch => {\n      dispatch(finishEndEdit(noteLine));\n    };\n  } else {\n    alert(\"here\");\n    return dispatch => {\n      const newBody = {\n        editedLine: noteLine.contents,\n        editedLineNumber: noteLine.lineNumber,\n        lineCount: currentLineCount,\n        noteSheet_id: currentNoteSheet_id,\n        userName: currentUserName\n      };\n      const options = {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newBody)\n      };\n      return dispatch => {\n        fetch(`${host}/noteSheetEdit`, options).then(responce => responce.json()).then(data => {\n          if (data.ok) {\n            dispatch(finishEndEdit(noteLine));\n          }\n        }).catch(e => console.error(e));\n      };\n    };\n  }\n}\nexport function finishEndEdit(noteLine, noteLines, currentLineCount, currentNoteSheet_id, currentUserName) {\n  return {\n    type: LineAction.EndEdit,\n    payload: noteLine\n  };\n}\nexport function addNewLine(location) {\n  return {\n    type: LineAction.AddNewLine,\n    payload: location\n  };\n}\nexport function loadLine(noteLine) {\n  return {\n    type: LineAction.LoadLine,\n    payload: noteLine\n  };\n}\nexport function incrementLineCount() {\n  return {\n    type: LineAction.IncrementLineCount,\n    payload: null\n  };\n}\nexport function removeLine(noteLine) {\n  return {\n    type: LineAction.RemoveLine,\n    payload: noteLine\n  };\n}","map":{"version":3,"sources":["/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/LineActions.js"],"names":["React","useState","getState","useSelector","useDispatch","checkForErrors","LineAction","Object","freeze","StartEdit","EndEdit","LoadLine","IncrementLineCount","AddNewLine","RemoveLine","host","startEdit","lineNumber","type","payload","beginEndEdit","noteLine","noteLines","currentLineCount","currentNoteSheet_id","currentUserName","alert","dispatch","finishEndEdit","newBody","editedLine","contents","editedLineNumber","lineCount","noteSheet_id","userName","options","method","headers","body","JSON","stringify","fetch","then","responce","json","data","ok","catch","e","console","error","addNewLine","location","loadLine","incrementLineCount","removeLine"],"mappings":"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","sourcesContent":["import React, {useState, getState} from 'react';\nimport {useSelector,useDispatch} from 'react-redux';\nimport {checkForErrors} from './UserActions'\n\nexport const LineAction = Object.freeze({\n  StartEdit: 'StartEdit',\n  EndEdit: 'EndEdit',\n  LoadLine: 'LoadLine',\n  IncrementLineCount: 'IncrementLineCount',\n  AddNewLine:'AddNewLine',\n  RemoveLine:'removeLine'\n})\n\nconst host = 'http://websystems.senapatiratne.com:1443';\n\n\nexport function startEdit(lineNumber){\n  return{\n    type: LineAction.StartEdit,\n    payload: lineNumber\n  };\n}\n\nexport function beginEndEdit(noteLine, noteLines, currentLineCount, currentNoteSheet_id,currentUserName){\n  if(currentUserName==null || currentUserName===\"\"){\n    alert(\"Not here\")\n    return dispatch => {\n      dispatch(finishEndEdit(noteLine))\n    }\n  }else{\n    alert(\"here\")\n    return dispatch => {\n      const newBody = {editedLine:noteLine.contents,editedLineNumber:noteLine.lineNumber,lineCount:currentLineCount,noteSheet_id:currentNoteSheet_id,userName:currentUserName};\n      const options = {method: 'PATCH', headers:{'Content-Type': 'application/json'}, body:JSON.stringify(newBody)};\n      return dispatch => {\n        fetch(`${host}/noteSheetEdit`,options)\n          .then(responce => responce.json())\n          .then(data => {\n            if(data.ok){\n              dispatch(finishEndEdit(noteLine))\n            }\n          })\n          .catch(e => console.error(e));\n      };\n    };\n  }\n}\n\n\n\nexport function finishEndEdit(noteLine, noteLines, currentLineCount, currentNoteSheet_id,currentUserName){\n  return{\n    type: LineAction.EndEdit,\n    payload: noteLine,\n  };\n}\n\nexport function addNewLine(location){\n    return{\n    type: LineAction.AddNewLine,\n    payload: location,\n  }\n}\n\nexport function loadLine(noteLine){\n  return {\n    type: LineAction.LoadLine,\n    payload: noteLine,\n  };\n}\n\nexport function incrementLineCount(){\n  return{\n    type: LineAction.IncrementLineCount,\n    payload: null\n  }\n}\n\nexport function removeLine(noteLine){\n  return{\n    type: LineAction.RemoveLine,\n    payload: noteLine\n  }\n}\n"]},"metadata":{},"sourceType":"module"}