{"ast":null,"code":"var _jsxFileName = \"/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/NoteLine.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector, useStore } from 'react-redux';\nimport { beginEdit, endEdit, addNewLine } from './LineActions';\nimport './noteLine.css'; //import {parseLine} from './lineParser'\n\nexport function NoteLine(props) {\n  //console.log(\"this line: \" + JSON.stringify(props.noteLine) + \", Important: \" + props.noteLine.lineContents)\n  const noteLine = props.noteLine;\n  const dispatch = useDispatch();\n  const [lineContents, setLineContents] = useState(noteLine.lineContents); //console.log(\"actual: \" + lineContents)\n  //useEffect(() => doSth(lineContents))\n\n  const lineCount = props.lineCount;\n\n  const onBeginEdit = () => {\n    //alert(lineContents + \" , \" + noteLine.lineContents)\n    dispatch(beginEdit(noteLine.lineNumber));\n  };\n\n  const onEndEdit = typeOfExit => {\n    //alert(lineContents)\n    dispatch(endEdit({\n      lineNumber: noteLine.lineNumber,\n      lineContents: lineContents\n    })); //alert(lineContents)\n\n    if (lineContents !== \"\" && typeOfExit === \"ENTER\") {\n      dispatch(addNewLine(noteLine.lineNumber));\n    }\n  };\n\n  const onUpArrow = () => {\n    if (noteLine.lineNumber != 1) {\n      dispatch(endEdit({\n        lineNumber: noteLine.lineNumber,\n        lineContents: lineContents\n      }));\n      dispatch(beginEdit(noteLine.lineNumber - 1));\n    }\n  };\n\n  const onDownArrow = () => {\n    if (noteLine.lineNumber != lineCount) {\n      dispatch(endEdit({\n        lineNumber: noteLine.lineNumber,\n        lineContents: lineContents\n      }));\n      dispatch(beginEdit(noteLine.lineNumber + 1));\n    }\n  };\n\n  const processesKeyPress = keyCode => {\n    if (keyCode === 13) {\n      onEndEdit(\"ENTER\");\n    } else if (keyCode === 38) {\n      onUpArrow();\n    } else if (keyCode === 40) {\n      onDownArrow();\n    }\n  };\n\n  if (noteLine.isEditing) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"lineArea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, \">\", /*#__PURE__*/React.createElement(\"input\", {\n      className: \"lineBox\",\n      value: lineContents,\n      onBlur: () => onEndEdit(\"CURSER\"),\n      onKeyDown: event => processesKeyPress(event.keyCode),\n      onChange: e => {\n        setLineContents(e.target.value);\n      },\n      ref: input => input && input.focus(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 10\n      }\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"lineArea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, parseLine(noteLine.lineContents));\n  }\n\n  function parseLine(lineContents) {\n    var parsedLineContents = lineContents; //parsing header info\n\n    var fontSizeArray = [12, 24, 20, 16];\n    var headerLevel = 0;\n\n    if (parsedLineContents[0] === '#') {\n      headerLevel = 1;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n\n    if (parsedLineContents[0] === '#') {\n      headerLevel = 2;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n\n    if (parsedLineContents[0] === '#') {\n      headerLevel = 3;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n\n    do {\n      var tracker = parsedLineContents;\n      parsedLineContents = parsedLineContents.replace(\"**\", \" <b> \");\n      parsedLineContents = parsedLineContents.replace(\"**\", \" <\\\\b> \");\n    } while (tracker != parsedLineContents);\n\n    parsedLineContents = parsedLineContents.replace(\"**\", \"<b>\");\n    var lineOutput = /*#__PURE__*/React.createElement(\"div\", {\n      onClick: onBeginEdit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 22\n      }\n    }, \" > \", /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        fontSize: fontSizeArray[headerLevel]\n      },\n      className: \"noteText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 52\n      }\n    }, \" parsedLineContents \"), \" \");\n    return lineOutput;\n  }\n}\n\nfunction extractAllText(str) {\n  const re = /%(.*?)%/g;\n  const result = [];\n  let current;\n\n  while (current = re.exec(str)) {\n    result.push(current.pop());\n  }\n\n  return result.length > 0 ? result : [str];\n}","map":{"version":3,"sources":["/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/NoteLine.js"],"names":["React","useEffect","useState","useDispatch","useSelector","useStore","beginEdit","endEdit","addNewLine","NoteLine","props","noteLine","dispatch","lineContents","setLineContents","lineCount","onBeginEdit","lineNumber","onEndEdit","typeOfExit","onUpArrow","onDownArrow","processesKeyPress","keyCode","isEditing","event","e","target","value","input","focus","parseLine","parsedLineContents","fontSizeArray","headerLevel","substr","tracker","replace","lineOutput","fontSize","extractAllText","str","re","result","current","exec","push","pop","length"],"mappings":"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","sourcesContent":["import React, {useEffect,useState} from 'react';\nimport {useDispatch, useSelector, useStore} from 'react-redux';\nimport {beginEdit, endEdit, addNewLine} from './LineActions'\nimport './noteLine.css';\n//import {parseLine} from './lineParser'\n\nexport function NoteLine(props){\n  //console.log(\"this line: \" + JSON.stringify(props.noteLine) + \", Important: \" + props.noteLine.lineContents)\n  const noteLine = props.noteLine;\n  const dispatch = useDispatch();\n  const [lineContents, setLineContents] = useState(noteLine.lineContents);\n  //console.log(\"actual: \" + lineContents)\n  //useEffect(() => doSth(lineContents))\n  const lineCount = props.lineCount\n\n  const onBeginEdit = () =>{\n    //alert(lineContents + \" , \" + noteLine.lineContents)\n    dispatch(beginEdit(noteLine.lineNumber));\n  }\n\n  const onEndEdit = (typeOfExit) =>{\n    //alert(lineContents)\n    dispatch(endEdit({lineNumber:noteLine.lineNumber, lineContents:lineContents}));\n    //alert(lineContents)\n    if(lineContents !== \"\" && typeOfExit === \"ENTER\"){\n      dispatch(addNewLine(noteLine.lineNumber));\n    }\n  }\n\nconst onUpArrow = () => {\n  if(noteLine.lineNumber != 1){\n    dispatch(endEdit({lineNumber:noteLine.lineNumber, lineContents:lineContents}));\n    dispatch(beginEdit(noteLine.lineNumber - 1));\n  }\n}\n\nconst onDownArrow = () => {\n  if(noteLine.lineNumber != lineCount){\n    dispatch(endEdit({lineNumber:noteLine.lineNumber, lineContents:lineContents}));\n    dispatch(beginEdit(noteLine.lineNumber + 1));\n  }\n}\n\n\nconst processesKeyPress = (keyCode) =>{\n  if(keyCode === 13){\n    onEndEdit(\"ENTER\");\n  }\n  else if(keyCode === 38){\n    onUpArrow();\n  }\n  else if(keyCode === 40){\n    onDownArrow();\n  }\n\n}\n\n  if(noteLine.isEditing){\n    return(\n      <span className=\"lineArea\">\n        ><input className=\"lineBox\" value={lineContents} onBlur={() => onEndEdit(\"CURSER\")} onKeyDown={event => processesKeyPress(event.keyCode)} onChange={e => {setLineContents(e.target.value)}} ref={input => input && input.focus()}/>\n      </span>\n    )\n  }else{\n    return(\n      <span className=\"lineArea\">\n        {parseLine(noteLine.lineContents)}\n      </span>\n    )\n  }\n\n\n  function parseLine(lineContents){\n    var parsedLineContents = lineContents;\n\n    //parsing header info\n    var fontSizeArray = [12,24,20,16]\n    var headerLevel = 0;\n    if(parsedLineContents[0] === '#'){\n      headerLevel = 1;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n    if(parsedLineContents[0] === '#'){\n      headerLevel = 2;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n    if(parsedLineContents[0] === '#'){\n      headerLevel = 3;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n\n\n    do{\n      var tracker = parsedLineContents;\n      parsedLineContents = parsedLineContents.replace(\"**\" , \" <b> \");\n      parsedLineContents = parsedLineContents.replace(\"**\" , \" <\\\\b> \");\n    }while(tracker != parsedLineContents)\n\n\n    parsedLineContents = parsedLineContents.replace(\"**\" , \"<b>\")\n\n    var lineOutput = <div onClick={onBeginEdit}> > <span style={{fontSize:fontSizeArray[headerLevel]}} className =\"noteText\"> parsedLineContents </span> </div>\n\n\n\n    return lineOutput;\n  }\n}\n\n\nfunction extractAllText(str){\n  const re = /%(.*?)%/g;\n  const result = [];\n  let current;\n  while (current = re.exec(str)) {\n    result.push(current.pop());\n  }\n  return result.length > 0\n    ? result\n    : [str];\n}\n"]},"metadata":{},"sourceType":"module"}