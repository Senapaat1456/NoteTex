{"ast":null,"code":"var _jsxFileName = \"/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/NoteLine.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector, useStore } from 'react-redux';\nimport { startEdit, beginEndEdit, addNewLine, removeLine } from './LineActions';\nimport ReactDOMServer from 'react-dom/server';\nimport './css/noteLine.css';\nimport MathJax from 'react-mathjax'; //import {parseLine} from './lineParser'\n\nexport function NoteLine(props) {\n  //console.log(\"this line: \" + JSON.stringify(props.noteLine) + \", Important: \" + props.noteLine.lineContents)\n  const noteLine = props.noteLine;\n  const dispatch = useDispatch();\n  const [lineContents, setLineContents] = useState(noteLine.lineContents); //console.log(\"actual: \" + lineContents)\n  //useEffect(() => doSth(lineContents))\n\n  const lineCount = props.lineCount;\n\n  const onStartEdit = () => {\n    //alert(lineContents + \" , \" + noteLine.lineContents)\n    dispatch(startEdit(noteLine.lineNumber));\n  };\n\n  const onEndEdit = typeOfExit => {\n    //alert(lineContents)\n    dispatch(beginEndEdit({\n      lineNumber: noteLine.lineNumber,\n      lineContents: lineContents\n    }, props.noteLines, lineCount, props.noteSheet_id, props.userName)); //alert(lineContents)\n\n    if (lineContents !== \"\" && typeOfExit === \"ENTER\") {\n      dispatch(addNewLine(noteLine.lineNumber));\n    }\n  };\n\n  const onRemoveLine = () => {\n    if (lineCount > 1) {\n      dispatch(removeLine(noteLine));\n    }\n\n    if (noteLine.lineNumber > 1) {\n      dispatch(startEdit(noteLine.lineNumber - 1));\n    }\n  };\n\n  const onUpArrow = () => {\n    if (noteLine.lineNumber != 1) {\n      dispatch(beginEndEdit({\n        lineNumber: noteLine.lineNumber,\n        lineContents: lineContents\n      }));\n      dispatch(startEdit(noteLine.lineNumber - 1));\n    }\n  };\n\n  const onDownArrow = () => {\n    if (noteLine.lineNumber != lineCount) {\n      dispatch(beginEndEdit({\n        lineNumber: noteLine.lineNumber,\n        lineContents: lineContents\n      }));\n      dispatch(startEdit(noteLine.lineNumber + 1));\n    }\n  };\n\n  const processesKeyPress = keyCode => {\n    if (keyCode === 13) {\n      onEndEdit(\"ENTER\");\n    } else if (keyCode === 38) {\n      onUpArrow();\n    } else if (keyCode === 40) {\n      onDownArrow();\n    } else if (keyCode === 8 && (lineContents === \"\" || lineContents == null)) {\n      onRemoveLine();\n    }\n  };\n\n  const input = 'This **textbolded** a header';\n\n  if (noteLine.isEditing) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"lineArea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"inputBox\",\n      value: lineContents,\n      onBlur: () => onEndEdit(\"CURSER\"),\n      onKeyDown: event => processesKeyPress(event.keyCode),\n      onChange: e => {\n        setLineContents(e.target.value);\n      },\n      ref: input => input && input.focus(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"lineArea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, parseLine(noteLine.lineContents));\n  } //\n  //<ReactMarkdown source={input}/>\n\n\n  function parseLine(lineContents) {\n    var parsedLineContents = lineContents; //parsing header info\n\n    var fontSizeArray = [12, 24, 20, 16];\n    var headerLevel = 0;\n\n    if (parsedLineContents[0] === '#') {\n      headerLevel = 1;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n\n    if (parsedLineContents[0] === '#') {\n      headerLevel = 2;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n\n    if (parsedLineContents[0] === '#') {\n      headerLevel = 3;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n    /*do{\n      var tracker = parsedLineContents;\n     }while(tracker != parsedLineContents)\n    */\n    //parsedLineContents = parsedLineContents.replace(\"**\" , \"<b>\");\n\n\n    var finalStructure, x;\n\n    try {\n      //var ReactDOMServer = require('react-dom/server');\n      [finalStructure, x] = markdownParser(parsedLineContents, null); //alert(lineContents + \" : \" + ReactDOMServer.renderToStaticMarkup(finalStructure))\n\n      var lineOutput = /*#__PURE__*/React.createElement(\"span\", {\n        onClick: onStartEdit,\n        style: {\n          fontSize: fontSizeArray[headerLevel]\n        },\n        className: \"noteText\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }\n      }, \" \", finalStructure, \" \");\n    } catch (err) {\n      var lineOutput = /*#__PURE__*/React.createElement(\"span\", {\n        onClick: onStartEdit,\n        style: {\n          fontSize: fontSizeArray[headerLevel]\n        },\n        className: \"noteText\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 24\n        }\n      }, \" \", parsedLineContents, \" \");\n    }\n\n    return lineOutput;\n  }\n\n  function markdownParser(lineContents, endSymbol) {\n    //var ReactDOMServer = require('react-dom/server');\n    var text = lineContents;\n    var stack = [];\n    var finalStructure;\n\n    while (text.length > 0 && text[0] !== endSymbol) {\n      //alert(\"Char: \" +   text[0]);\n      stack.push(text[0]);\n      text = text.substr(1); //alert(\"Char: \" + stack[stack.length - 1]);\n\n      if (endSymbol !== '$' && (stack[stack.length - 1] === '%' || stack[stack.length - 1] === '`' || stack[stack.length - 1] === '$')) {\n        //alert(\"pound found\");\n        var recursiveStructure;\n        [recursiveStructure, text] = markdownParser(text, stack[stack.length - 1]); //alert(\"Sending: \" + text + \", looking for:\" + stack[stack.length - 1])\n\n        stack.pop(stack.length - 1);\n        finalStructure = /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 26\n          }\n        }, finalStructure, /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 48\n          }\n        }, stack), /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 68\n          }\n        }, recursiveStructure)); //alert(\"Final Structre: \" + ReactDOMServer.renderToStaticMarkup(finalStructure))\n\n        stack = [];\n        text = text.substr(1); //alert(\"Text at end: \" +    text);\n      }\n    }\n\n    finalStructure = /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 22\n      }\n    }, finalStructure, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 44\n      }\n    }, stack));\n\n    if (text == null || text.length === 0) {\n      //alert(\"returning: \" +  ReactDOMServer.renderToStaticMarkup(<span> {finalStructure} </span>))\n      return [/*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 15\n        }\n      }, finalStructure), null];\n    } else {\n      if (endSymbol === '%') {\n        //alert(\"returning: \" +  ReactDOMServer.renderToStaticMarkup(<b>{finalStructure}</b>) + \", with left overs: \" + text)\n        return [/*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }\n        }, finalStructure), text];\n      }\n\n      if (endSymbol === '`') {\n        //alert(\"returning: \" +  ReactDOMServer.renderToStaticMarkup(<i>{finalStructure}</i>) + \", with left overs: \" + text)\n        return [/*#__PURE__*/React.createElement(\"i\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 17\n          }\n        }, finalStructure), text];\n      }\n\n      if (endSymbol === '$') {\n        //alert(stack.join(''))\n        var latexScript = stack.join(''); //alert(\"Latex String = \" + latexScript)\n        //     alert(\"returning: \" +  ReactDOMServer.renderToStaticMarkup(<Latex>{latexScript}</Latex>) + \", with left overs: \" + text)\n\n        return [/*#__PURE__*/React.createElement(MathJax.Provider, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(MathJax.Node, {\n          inline: true,\n          formula: latexScript,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 35\n          }\n        })), text];\n      }\n    }\n\n    return ['', ''];\n  }\n  /*function markdownParserRecursive(lineContents,endSymbol){\n    var returnStack = []\n    while(lineContents.length > 0 && lineContents[0] != endSymbol){\n     }\n  }*/\n\n}","map":{"version":3,"sources":["/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/NoteLine.js"],"names":["React","useEffect","useState","useDispatch","useSelector","useStore","startEdit","beginEndEdit","addNewLine","removeLine","ReactDOMServer","MathJax","NoteLine","props","noteLine","dispatch","lineContents","setLineContents","lineCount","onStartEdit","lineNumber","onEndEdit","typeOfExit","noteLines","noteSheet_id","userName","onRemoveLine","onUpArrow","onDownArrow","processesKeyPress","keyCode","input","isEditing","event","e","target","value","focus","parseLine","parsedLineContents","fontSizeArray","headerLevel","substr","finalStructure","x","markdownParser","lineOutput","fontSize","err","endSymbol","text","stack","length","push","recursiveStructure","pop","latexScript","join"],"mappings":"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","sourcesContent":["import React, {useEffect,useState} from 'react';\nimport {useDispatch, useSelector, useStore} from 'react-redux';\nimport {startEdit, beginEndEdit, addNewLine, removeLine} from './LineActions'\nimport ReactDOMServer from 'react-dom/server';\nimport './css/noteLine.css';\nimport MathJax from 'react-mathjax';\n//import {parseLine} from './lineParser'\n\nexport function NoteLine(props){\n  //console.log(\"this line: \" + JSON.stringify(props.noteLine) + \", Important: \" + props.noteLine.lineContents)\n  const noteLine = props.noteLine;\n  const dispatch = useDispatch();\n  const [lineContents, setLineContents] = useState(noteLine.lineContents);\n  //console.log(\"actual: \" + lineContents)\n  //useEffect(() => doSth(lineContents))\n  const lineCount = props.lineCount\n\n  const onStartEdit = () =>{\n    //alert(lineContents + \" , \" + noteLine.lineContents)\n    dispatch(startEdit(noteLine.lineNumber));\n  }\n\n  const onEndEdit = (typeOfExit) =>{\n    //alert(lineContents)\n    dispatch(beginEndEdit({lineNumber:noteLine.lineNumber, lineContents:lineContents},props.noteLines,lineCount,props.noteSheet_id,props.userName));\n    //alert(lineContents)\n    if(lineContents !== \"\" && typeOfExit === \"ENTER\"){\n      dispatch(addNewLine(noteLine.lineNumber));\n    }\n  }\n\n  const onRemoveLine = () =>{\n    if(lineCount > 1){\n      dispatch(removeLine(noteLine));\n    }\n    if(noteLine.lineNumber > 1){\n      dispatch(startEdit(noteLine.lineNumber - 1));\n    }\n  }\n\nconst onUpArrow = () => {\n  if(noteLine.lineNumber != 1){\n    dispatch(beginEndEdit({lineNumber:noteLine.lineNumber, lineContents:lineContents}));\n    dispatch(startEdit(noteLine.lineNumber - 1));\n  }\n}\n\nconst onDownArrow = () => {\n  if(noteLine.lineNumber != lineCount){\n    dispatch(beginEndEdit({lineNumber:noteLine.lineNumber, lineContents:lineContents}));\n    dispatch(startEdit(noteLine.lineNumber + 1));\n  }\n}\n\n\nconst processesKeyPress = (keyCode) =>{\n  if(keyCode === 13){\n    onEndEdit(\"ENTER\");\n  }\n  else if(keyCode === 38){\n    onUpArrow();\n  }\n  else if(keyCode === 40){\n    onDownArrow();\n  }\n  else if(keyCode === 8 && (lineContents === \"\" || lineContents == null)){\n      onRemoveLine();\n  }\n\n}\n  const input = 'This **textbolded** a header';\n  if(noteLine.isEditing){\n    return(\n      <span className=\"lineArea\">\n        <input className=\"inputBox\" value={lineContents} onBlur={() => onEndEdit(\"CURSER\")} onKeyDown={event => processesKeyPress(event.keyCode)} onChange={e => {setLineContents(e.target.value)}} ref={input => input && input.focus()}/>\n      </span>\n    )\n  }else{\n    return(\n      <span className=\"lineArea\">\n        {parseLine(noteLine.lineContents)}\n      </span>\n    )\n  }\n  //\n  //<ReactMarkdown source={input}/>\n\n\n  function parseLine(lineContents){\n    var parsedLineContents = lineContents;\n\n    //parsing header info\n    var fontSizeArray = [12,24,20,16]\n    var headerLevel = 0;\n    if(parsedLineContents[0] === '#'){\n      headerLevel = 1;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n    if(parsedLineContents[0] === '#'){\n      headerLevel = 2;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n    if(parsedLineContents[0] === '#'){\n      headerLevel = 3;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n\n\n    /*do{\n      var tracker = parsedLineContents;\n\n    }while(tracker != parsedLineContents)\n    */\n\n    //parsedLineContents = parsedLineContents.replace(\"**\" , \"<b>\");\n    var finalStructure, x;\n\n    try{//var ReactDOMServer = require('react-dom/server');\n      [finalStructure, x] = markdownParser(parsedLineContents,null);\n       //alert(lineContents + \" : \" + ReactDOMServer.renderToStaticMarkup(finalStructure))\n       var lineOutput = <span onClick={onStartEdit} style={{fontSize:fontSizeArray[headerLevel]}} className =\"noteText\"> {finalStructure} </span>\n    }catch(err){\n      var lineOutput = <span onClick={onStartEdit} style={{fontSize:fontSizeArray[headerLevel]}} className =\"noteText\"> {parsedLineContents} </span>\n\n    }\n\n\n    return lineOutput;\n  }\n\n  function markdownParser(lineContents, endSymbol){\n    //var ReactDOMServer = require('react-dom/server');\n\n    var text = lineContents;\n    var stack = [];\n    var finalStructure;\n    while(text.length > 0 && text[0] !== endSymbol){\n      //alert(\"Char: \" +   text[0]);\n      stack.push(text[0]);\n      text  = text.substr(1);\n      //alert(\"Char: \" + stack[stack.length - 1]);\n      if(endSymbol !== '$' && (stack[stack.length - 1] === '%' || stack[stack.length - 1] === '`' || stack[stack.length - 1] === '$')){\n        //alert(\"pound found\");\n\n        var recursiveStructure;\n        [recursiveStructure, text] = markdownParser(text,stack[stack.length - 1]);\n\n        //alert(\"Sending: \" + text + \", looking for:\" + stack[stack.length - 1])\n        stack.pop(stack.length - 1)\n        finalStructure = <span>{finalStructure}<span>{stack}</span><span>{recursiveStructure}</span></span>;\n        //alert(\"Final Structre: \" + ReactDOMServer.renderToStaticMarkup(finalStructure))\n        stack = [];\n        text  = text.substr(1);\n        //alert(\"Text at end: \" +    text);\n      }\n    }\n\n    finalStructure = <span>{finalStructure}<span>{stack}</span></span>;\n\n\n    if(text == null || text.length === 0){\n      //alert(\"returning: \" +  ReactDOMServer.renderToStaticMarkup(<span> {finalStructure} </span>))\n      return [<span>{finalStructure}</span>,null];\n    }else{\n\n      if(endSymbol === '%'){\n        //alert(\"returning: \" +  ReactDOMServer.renderToStaticMarkup(<b>{finalStructure}</b>) + \", with left overs: \" + text)\n        return [<b>{finalStructure}</b>,text];\n\n      }\n      if(endSymbol === '`'){\n        //alert(\"returning: \" +  ReactDOMServer.renderToStaticMarkup(<i>{finalStructure}</i>) + \", with left overs: \" + text)\n        return [<i>{finalStructure}</i>,text];\n\n      }\n      if(endSymbol === '$'){\n        //alert(stack.join(''))\n\n        var latexScript =stack.join('');\n        //alert(\"Latex String = \" + latexScript)\n        //     alert(\"returning: \" +  ReactDOMServer.renderToStaticMarkup(<Latex>{latexScript}</Latex>) + \", with left overs: \" + text)\n        return [<MathJax.Provider><MathJax.Node inline formula={latexScript} /></MathJax.Provider>,text];\n\n      }\n    }\n\n\n    return ['','']\n}\n\n  /*function markdownParserRecursive(lineContents,endSymbol){\n    var returnStack = []\n    while(lineContents.length > 0 && lineContents[0] != endSymbol){\n\n    }\n  }*/\n\n}\n"]},"metadata":{},"sourceType":"module"}