{"ast":null,"code":"import { Action } from './LineActions';\nconst initialState = {\n  noteLines: [],\n  currentLine: {\n    lineContents: \"temp\"\n  }\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case Action.BeginEdit:\n      return { ...state,\n        noteLines: state.noteLines.map(line => {\n          if (line.id === action.payload.id) {\n            return { ...line,\n              isEditing: true\n            };\n          } else {\n            return line;\n          }\n        }, {\n          currentLine: action.payload\n        })\n      };\n\n    case Action.EndEdit:\n      return { ...state,\n        noteLines: state.noteLines.map(line => {\n          if (line.id === action.payload.id) {\n            return { ...line,\n              isEditing: undefined\n            };\n          } else {\n            return line;\n          }\n        })\n      };\n\n    case Action.LoadLine:\n      return { ...state,\n        noteLines: [action.payload, ...state.noteLines]\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/LineReducer.js"],"names":["Action","initialState","noteLines","currentLine","lineContents","reducer","state","action","type","BeginEdit","map","line","id","payload","isEditing","EndEdit","undefined","LoadLine"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,eAArB;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,EADQ;AAEnBC,EAAAA,WAAW,EAAE;AAACC,IAAAA,YAAY,EAAC;AAAd;AAFM,CAArB;;AAIA,SAASC,OAAT,CAAiBC,KAAK,GAAGL,YAAzB,EAAuCM,MAAvC,EAA8C;AAC5C,UAAQA,MAAM,CAACC,IAAf;AAGE,SAAKR,MAAM,CAACS,SAAZ;AACE,aAAM,EACH,GAAGH,KADA;AAEHJ,QAAAA,SAAS,EAAEI,KAAK,CAACJ,SAAN,CAAgBQ,GAAhB,CAAoBC,IAAI,IAAG;AACpC,cAAGA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACM,OAAP,CAAeD,EAA9B,EAAiC;AAC/B,mBAAM,EAAC,GAAGD,IAAJ;AAAUG,cAAAA,SAAS,EAAC;AAApB,aAAN;AACD,WAFD,MAGI;AACF,mBAAOH,IAAP;AACD;AACF,SAPU,EAOR;AAACR,UAAAA,WAAW,EAACI,MAAM,CAACM;AAApB,SAPQ;AAFR,OAAN;;AAaF,SAAKb,MAAM,CAACe,OAAZ;AACE,aAAM,EACH,GAAGT,KADA;AAEHJ,QAAAA,SAAS,EAAEI,KAAK,CAACJ,SAAN,CAAgBQ,GAAhB,CAAoBC,IAAI,IAAG;AACpC,cAAGA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACM,OAAP,CAAeD,EAA9B,EAAiC;AAC/B,mBAAM,EAAC,GAAGD,IAAJ;AAAUG,cAAAA,SAAS,EAACE;AAApB,aAAN;AACD,WAFD,MAGI;AACF,mBAAOL,IAAP;AACD;AACF,SAPU;AAFR,OAAN;;AAaD,SAAKX,MAAM,CAACiB,QAAZ;AACE,aAAM,EACJ,GAAGX,KADC;AAEJJ,QAAAA,SAAS,EAAE,CAACK,MAAM,CAACM,OAAR,EAAiB,GAAGP,KAAK,CAACJ,SAA1B;AAFP,OAAN;;AAMH;AACE,aAAOI,KAAP;AAvCJ;AAyCD;;AACD,eAAeD,OAAf","sourcesContent":["import {Action} from './LineActions';\nconst initialState = {\n  noteLines: [],\n  currentLine: {lineContents:\"temp\"}\n}\nfunction reducer(state = initialState, action){\n  switch (action.type) {\n\n\n    case Action.BeginEdit:\n      return{\n         ...state,\n         noteLines: state.noteLines.map(line =>{\n           if(line.id === action.payload.id){\n             return{...line, isEditing:true};\n           }\n           else{\n             return line;\n           }\n         }, {currentLine:action.payload})\n       }\n\n\n    case Action.EndEdit:\n      return{\n         ...state,\n         noteLines: state.noteLines.map(line =>{\n           if(line.id === action.payload.id){\n             return{...line, isEditing:undefined};\n           }\n           else{\n             return line;\n           }\n         })\n       }\n\n\n     case Action.LoadLine:\n       return{\n         ...state,\n         noteLines: [action.payload, ...state.noteLines],\n       }\n\n\n    default:\n      return state;\n  }\n}\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}