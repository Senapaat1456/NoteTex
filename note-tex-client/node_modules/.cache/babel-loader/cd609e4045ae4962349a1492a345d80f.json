{"ast":null,"code":"import { LineAction } from './LineActions';\nimport { UserAction } from './UserActions';\nconst initialState = {\n  lineCount: 0,\n  noteLines: [],\n  userName: \"\",\n  noteSheets: []\n};\n\nfunction noteLinesReducer(noteLinesArray, action) {\n  switch (action.type) {\n    case LineAction.BeginEdit:\n      return noteLinesArray.map(line => {\n        if (line.lineNumber === action.payload) {\n          return { ...line,\n            isEditing: true\n          };\n        } else {\n          return line;\n        }\n      });\n\n    case LineAction.EndEdit:\n      return noteLinesArray.map(line => {\n        if (line.lineNumber === action.payload.lineNumber) {\n          return action.payload;\n        } else {\n          return line;\n        }\n      });\n\n    case LineAction.LoadLine:\n      return [action.payload, ...noteLinesArray];\n\n    case LineAction.AddNewLine:\n      //console.log(\"Old: \"+ JSON.stringify(noteLinesArray))\n      const oldList = noteLinesArray.map(line => {\n        //console.log(\"a Line: \"+ JSON.stringify(line))\n        if (line.lineNumber <= action.payload) {\n          return {\n            lineContents: line.lineContents + \"\",\n            lineNumber: line.lineNumber,\n            marked: \"under\"\n          };\n        } else {\n          return {\n            lineContents: line.lineContents + \"\",\n            lineNumber: line.lineNumber + 1,\n            marked: \"Over\"\n          };\n        }\n      });\n      const temp = {\n        lineNumber: action.payload + 1,\n        lineContents: \"\",\n        isEditing: true,\n        marked: \"new\"\n      }; //console.log(\"New: \"+ JSON.stringify([...oldList, temp].sort((a,b) => {return a.lineNumber - b.lineNumber})))\n\n      return [...oldList, temp].sort((a, b) => {\n        return a.lineNumber - b.lineNumber;\n      });\n\n    case LineAction.RemoveLine:\n      const newList = noteLinesArray.filter(line => line.lineNumber != action.payload.lineNumber).map(line => {\n        //console.log(\"a Line: \"+ JSON.stringify(line))\n        if (line.lineNumber <= action.payload.lineNumber) {\n          return {\n            lineContents: line.lineContents + \"\",\n            lineNumber: line.lineNumber,\n            marked: \"under\"\n          };\n        } else {\n          return {\n            lineContents: line.lineContents + \"\",\n            lineNumber: line.lineNumber - 1,\n            marked: \"Over\"\n          };\n        }\n      }); //console.log(\"New: \"+ JSON.stringify([...oldList, temp].sort((a,b) => {return a.lineNumber - b.lineNumber})))\n\n      return newList.sort((a, b) => {\n        return a.lineNumber - b.lineNumber;\n      });\n\n    case UserAction.FinishLoadSheet:\n      return action.payload.contents;\n    //.sort((a,b) => {return a.lineNumber - b.lineNumber});\n\n    default:\n      return noteLinesArray;\n  }\n}\n\nfunction lineCountReducer(lineCountVar, action) {\n  switch (action.type) {\n    case LineAction.LoadLine:\n      return lineCountVar + 1;\n\n    case LineAction.AddNewLine:\n      return lineCountVar + 1;\n\n    case LineAction.RemoveLine:\n      return lineCountVar - 1;\n\n    case UserAction.FinishLoadSheet:\n      return action.payload.lineCount;\n\n    case UserAction.Logout:\n      return 0;\n\n    default:\n      return lineCountVar;\n  }\n}\n\nfunction userNameReducer(userNameVar, action) {\n  switch (action.type) {\n    case UserAction.FinishLogin:\n      return action.payload.userName;\n\n    case UserAction.Logout:\n      return \"\";\n\n    default:\n      return userNameVar;\n  }\n}\n\nfunction noteSheetsReducer(noteSheetsArray, action) {\n  switch (action.type) {\n    case UserAction.BeginNewNoteSheet:\n      return [...noteSheetsArray, {\n        noteSheetName: \"new sheet\"\n      }];\n\n    case UserAction.FinishLogin:\n      return action.payload.noteSheetList;\n\n    case UserAction.FinishLoadSheet:\n      return noteSheetsArray.map(sheet => {\n        if (sheet.noteSheetName === action.payload.noteSheetName) {\n          alert(\"Here\");\n          return { ...sheet,\n            isActive: true\n          };\n        } else {\n          alert(\"Here\");\n          return { ...sheet,\n            isActive: false\n          };\n        }\n      });\n\n    case UserAction.Logout:\n      return [];\n\n    default:\n      return noteSheetsArray;\n  }\n}\n\nfunction reducer(state = initialState, action) {\n  return {\n    lineCount: lineCountReducer(state.lineCount, action),\n    noteLines: noteLinesReducer(state.noteLines, action),\n    userName: userNameReducer(state.userName, action),\n    noteSheets: noteSheetsReducer(state.noteSheets, action)\n  };\n}\n\nexport default reducer;","map":{"version":3,"sources":["/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/LineReducer.js"],"names":["LineAction","UserAction","initialState","lineCount","noteLines","userName","noteSheets","noteLinesReducer","noteLinesArray","action","type","BeginEdit","map","line","lineNumber","payload","isEditing","EndEdit","LoadLine","AddNewLine","oldList","lineContents","marked","temp","sort","a","b","RemoveLine","newList","filter","FinishLoadSheet","contents","lineCountReducer","lineCountVar","Logout","userNameReducer","userNameVar","FinishLogin","noteSheetsReducer","noteSheetsArray","BeginNewNoteSheet","noteSheetName","noteSheetList","sheet","alert","isActive","reducer","state"],"mappings":"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","sourcesContent":["import {LineAction} from './LineActions';\nimport {UserAction} from './UserActions'\nconst initialState = {\n  lineCount: 0,\n  noteLines: [],\n  userName:\"\",\n  noteSheets:[],\n}\n\nfunction noteLinesReducer(noteLinesArray, action){\n  switch (action.type) {\n\n\n    case LineAction.BeginEdit:\n      return noteLinesArray.map(line =>{\n        if(line.lineNumber === action.payload){\n          return{...line, isEditing:true};\n        }\n        else{\n          return line;\n        }\n      });\n\n\n    case LineAction.EndEdit:\n      return noteLinesArray.map(line =>{\n           if(line.lineNumber === action.payload.lineNumber){\n             return action.payload;\n           }\n           else{\n             return line;\n           }\n         });\n\n\n\n    case LineAction.LoadLine:\n      return [action.payload, ...noteLinesArray]\n\n\n    case LineAction.AddNewLine:\n      //console.log(\"Old: \"+ JSON.stringify(noteLinesArray))\n      const oldList = noteLinesArray.map(line =>{\n\n        //console.log(\"a Line: \"+ JSON.stringify(line))\n\n        if(line.lineNumber <= action.payload){\n\n          return {lineContents:line.lineContents+\"\", lineNumber:line.lineNumber, marked:\"under\"}\n\n        }\n        else{\n\n          return{lineContents:line.lineContents+\"\", lineNumber:line.lineNumber+1, marked:\"Over\"}\n\n        }\n      })\n      const temp = {lineNumber:action.payload+1, lineContents:\"\", isEditing:true, marked:\"new\"}\n      //console.log(\"New: \"+ JSON.stringify([...oldList, temp].sort((a,b) => {return a.lineNumber - b.lineNumber})))\n      return [...oldList, temp].sort((a,b) => {return a.lineNumber - b.lineNumber});\n\n\n    case LineAction.RemoveLine:\n      const newList = noteLinesArray.filter(line => line.lineNumber != action.payload.lineNumber).map(line =>{\n\n        //console.log(\"a Line: \"+ JSON.stringify(line))\n\n        if(line.lineNumber <= action.payload.lineNumber ){\n\n          return {lineContents:line.lineContents+\"\", lineNumber:line.lineNumber, marked:\"under\"}\n\n        }\n        else{\n\n          return{lineContents:line.lineContents+\"\", lineNumber:line.lineNumber-1, marked:\"Over\"}\n\n        }\n      })\n      //console.log(\"New: \"+ JSON.stringify([...oldList, temp].sort((a,b) => {return a.lineNumber - b.lineNumber})))\n      return newList.sort((a,b) => {return a.lineNumber - b.lineNumber});\n\n\n    case UserAction.FinishLoadSheet:\n      return action.payload.contents//.sort((a,b) => {return a.lineNumber - b.lineNumber});\n\n    default:\n      return noteLinesArray;\n\n  }\n}\n\nfunction lineCountReducer(lineCountVar, action){\n  switch (action.type) {\n\n\n    case LineAction.LoadLine:\n      return (lineCountVar+1);\n\n\n    case LineAction.AddNewLine:\n      return (lineCountVar+1);\n\n\n    case LineAction.RemoveLine:\n      return (lineCountVar-1)\n\n\n    case UserAction.FinishLoadSheet:\n      return action.payload.lineCount;\n\n\n    case UserAction.Logout:\n      return 0;\n\n\n    default:\n      return lineCountVar;\n  }\n}\n\nfunction userNameReducer(userNameVar, action){\n  switch (action.type){\n\n\n    case UserAction.FinishLogin:\n      return action.payload.userName;\n\n\n    case UserAction.Logout:\n      return \"\";\n\n    default:\n      return userNameVar;\n\n  }\n}\n\nfunction noteSheetsReducer(noteSheetsArray, action){\n  switch (action.type){\n\n\n    case UserAction.BeginNewNoteSheet:\n      return [...noteSheetsArray,{noteSheetName:\"new sheet\"}]\n\n\n    case UserAction.FinishLogin:\n      return action.payload.noteSheetList;\n\n\n    case UserAction.FinishLoadSheet:\n      return noteSheetsArray.map(sheet =>{\n        if(sheet.noteSheetName === action.payload.noteSheetName){\n          alert(\"Here\")\n          return{...sheet, isActive:true};\n        }\n        else{\n          alert(\"Here\")\n          return{...sheet, isActive:false};\n        }\n      });\n\n\n      case UserAction.Logout:\n        return [];\n\n    default:\n      return noteSheetsArray;\n  }\n}\nfunction reducer(state = initialState, action){\n    return{\n      lineCount: lineCountReducer(state.lineCount, action),\n      noteLines: noteLinesReducer(state.noteLines, action),\n      userName: userNameReducer(state.userName, action),\n      noteSheets: noteSheetsReducer(state.noteSheets, action)\n    };\n}\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}