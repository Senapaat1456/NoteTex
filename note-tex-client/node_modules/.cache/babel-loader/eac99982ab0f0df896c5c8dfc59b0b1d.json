{"ast":null,"code":"var _jsxFileName = \"/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/NoteLine.js\";\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { startEdit, beginEndEdit, addNewLine, removeLine } from './LineActions';\nimport './css/noteLine.css';\nimport MathJax from 'react-mathjax';\nexport function NoteLine(props) {\n  const noteLine = props.noteLine;\n  const dispatch = useDispatch();\n  const [lineContents, setLineContents] = useState(noteLine.lineContents);\n  const lineCount = props.lineCount;\n\n  const onStartEdit = () => {\n    dispatch(startEdit(noteLine.lineNumber));\n  };\n\n  const onEndEdit = typeOfExit => {\n    dispatch(beginEndEdit({\n      lineNumber: noteLine.lineNumber,\n      lineContents: lineContents\n    }, props.noteLines, lineCount, props.noteSheet_id, props.userName));\n\n    if (lineContents !== \"\" && typeOfExit === \"ENTER\") {\n      dispatch(addNewLine(noteLine.lineNumber));\n    }\n  };\n\n  const onRemoveLine = () => {\n    if (lineCount > 1) {\n      dispatch(removeLine(noteLine));\n    }\n\n    if (noteLine.lineNumber > 1) {\n      dispatch(startEdit(noteLine.lineNumber - 1));\n    }\n  };\n\n  const onUpArrow = () => {\n    if (noteLine.lineNumber !== 1) {\n      dispatch(beginEndEdit({\n        lineNumber: noteLine.lineNumber,\n        lineContents: lineContents\n      }));\n      dispatch(startEdit(noteLine.lineNumber - 1));\n    }\n  };\n\n  const onDownArrow = () => {\n    if (noteLine.lineNumber !== lineCount) {\n      dispatch(beginEndEdit({\n        lineNumber: noteLine.lineNumber,\n        lineContents: lineContents\n      }));\n      dispatch(startEdit(noteLine.lineNumber + 1));\n    }\n  };\n\n  const processesKeyPress = keyCode => {\n    if (keyCode === 13) {\n      onEndEdit(\"ENTER\");\n    } else if (keyCode === 38) {\n      onUpArrow();\n    } else if (keyCode === 40) {\n      onDownArrow();\n    } else if (keyCode === 8 && (lineContents === \"\" || lineContents == null)) {\n      onRemoveLine();\n    }\n  };\n\n  const input = 'This **textbolded** a header';\n\n  if (noteLine.isEditing) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"lineArea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"inputBox\",\n      value: lineContents,\n      onBlur: () => onEndEdit(\"CURSER\"),\n      onKeyDown: event => processesKeyPress(event.keyCode),\n      onChange: e => {\n        setLineContents(e.target.value);\n      },\n      ref: input => input && input.focus(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"lineArea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, parseLine(noteLine.lineContents));\n  }\n\n  function parseLine(lineContents) {\n    var parsedLineContents = lineContents;\n    var fontSizeArray = [12, 24, 20, 16];\n    var headerLevel = 0;\n\n    if (parsedLineContents[0] === '#') {\n      headerLevel = 1;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n\n    if (parsedLineContents[0] === '#') {\n      headerLevel = 2;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n\n    if (parsedLineContents[0] === '#') {\n      headerLevel = 3;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n\n    var finalStructure;\n\n    try {\n      [finalStructure, x] = markdownParser(parsedLineContents, null);\n      var lineOutput = /*#__PURE__*/React.createElement(\"span\", {\n        onClick: onStartEdit,\n        style: {\n          fontSize: fontSizeArray[headerLevel]\n        },\n        className: \"noteText\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }\n      }, \" \", finalStructure, \" \");\n    } catch (err) {\n      var lineOutput = /*#__PURE__*/React.createElement(\"span\", {\n        onClick: onStartEdit,\n        style: {\n          fontSize: fontSizeArray[headerLevel]\n        },\n        className: \"noteText\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 24\n        }\n      }, \" \", parsedLineContents, \" \");\n    }\n\n    return lineOutput;\n  }\n\n  function markdownParser(lineContents, endSymbol) {\n    var text = lineContents;\n    var stack = [];\n    var finalStructure;\n\n    while (text.length > 0 && text[0] !== endSymbol) {\n      stack.push(text[0]);\n      text = text.substr(1);\n\n      if (endSymbol !== '$' && (stack[stack.length - 1] === '%' || stack[stack.length - 1] === '`' || stack[stack.length - 1] === '$')) {\n        var recursiveStructure;\n        [recursiveStructure, text] = markdownParser(text, stack[stack.length - 1]);\n        stack.pop(stack.length - 1);\n        finalStructure = /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 26\n          }\n        }, finalStructure, /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 48\n          }\n        }, stack), /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 68\n          }\n        }, recursiveStructure));\n        stack = [];\n        text = text.substr(1);\n      }\n    }\n\n    finalStructure = /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 22\n      }\n    }, finalStructure, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 44\n      }\n    }, stack));\n\n    if (text == null || text.length === 0) {\n      return [/*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }\n      }, finalStructure), null];\n    } else {\n      if (endSymbol === '%') {\n        return [/*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 17\n          }\n        }, finalStructure), text];\n      }\n\n      if (endSymbol === '`') {\n        return [/*#__PURE__*/React.createElement(\"i\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 17\n          }\n        }, finalStructure), text];\n      }\n\n      if (endSymbol === '$') {\n        var latexScript = stack.join('');\n        return [/*#__PURE__*/React.createElement(MathJax.Provider, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(MathJax.Node, {\n          inline: true,\n          formula: latexScript,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 35\n          }\n        })), text];\n      }\n    }\n\n    return ['', ''];\n  }\n}","map":{"version":3,"sources":["/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/NoteLine.js"],"names":["React","useState","useDispatch","startEdit","beginEndEdit","addNewLine","removeLine","MathJax","NoteLine","props","noteLine","dispatch","lineContents","setLineContents","lineCount","onStartEdit","lineNumber","onEndEdit","typeOfExit","noteLines","noteSheet_id","userName","onRemoveLine","onUpArrow","onDownArrow","processesKeyPress","keyCode","input","isEditing","event","e","target","value","focus","parseLine","parsedLineContents","fontSizeArray","headerLevel","substr","finalStructure","x","markdownParser","lineOutput","fontSize","err","endSymbol","text","stack","length","push","recursiveStructure","pop","latexScript","join"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {startEdit, beginEndEdit, addNewLine, removeLine} from './LineActions'\nimport './css/noteLine.css';\nimport MathJax from 'react-mathjax';\n\nexport function NoteLine(props){\n  const noteLine = props.noteLine;\n  const dispatch = useDispatch();\n  const [lineContents, setLineContents] = useState(noteLine.lineContents);\n  const lineCount = props.lineCount\n\n  const onStartEdit = () =>{\n    dispatch(startEdit(noteLine.lineNumber));\n  }\n\n  const onEndEdit = (typeOfExit) =>{\n    dispatch(beginEndEdit({lineNumber:noteLine.lineNumber, lineContents:lineContents},props.noteLines,lineCount,props.noteSheet_id,props.userName));\n    if(lineContents !== \"\" && typeOfExit === \"ENTER\"){\n      dispatch(addNewLine(noteLine.lineNumber));\n    }\n  }\n\n  const onRemoveLine = () =>{\n    if(lineCount > 1){\n      dispatch(removeLine(noteLine));\n    }\n    if(noteLine.lineNumber > 1){\n      dispatch(startEdit(noteLine.lineNumber - 1));\n    }\n  }\n\nconst onUpArrow = () => {\n  if(noteLine.lineNumber !== 1){\n    dispatch(beginEndEdit({lineNumber:noteLine.lineNumber, lineContents:lineContents}));\n    dispatch(startEdit(noteLine.lineNumber - 1));\n  }\n}\n\nconst onDownArrow = () => {\n  if(noteLine.lineNumber !== lineCount){\n    dispatch(beginEndEdit({lineNumber:noteLine.lineNumber, lineContents:lineContents}));\n    dispatch(startEdit(noteLine.lineNumber + 1));\n  }\n}\n\n\nconst processesKeyPress = (keyCode) =>{\n  if(keyCode === 13){\n    onEndEdit(\"ENTER\");\n  }\n  else if(keyCode === 38){\n    onUpArrow();\n  }\n  else if(keyCode === 40){\n    onDownArrow();\n  }\n  else if(keyCode === 8 && (lineContents === \"\" || lineContents == null)){\n      onRemoveLine();\n  }\n\n}\n  const input = 'This **textbolded** a header';\n  if(noteLine.isEditing){\n    return(\n      <span className=\"lineArea\">\n        <input className=\"inputBox\" value={lineContents} onBlur={() => onEndEdit(\"CURSER\")} onKeyDown={event => processesKeyPress(event.keyCode)} onChange={e => {setLineContents(e.target.value)}} ref={input => input && input.focus()}/>\n      </span>\n    )\n  }else{\n    return(\n      <span className=\"lineArea\">\n        {parseLine(noteLine.lineContents)}\n      </span>\n    )\n  }\n\n  function parseLine(lineContents){\n    var parsedLineContents = lineContents;\n\n    var fontSizeArray = [12,24,20,16]\n    var headerLevel = 0;\n    if(parsedLineContents[0] === '#'){\n      headerLevel = 1;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n    if(parsedLineContents[0] === '#'){\n      headerLevel = 2;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n    if(parsedLineContents[0] === '#'){\n      headerLevel = 3;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n\n\n    var finalStructure;\n\n    try{\n      [finalStructure, x] = markdownParser(parsedLineContents,null);\n       var lineOutput = <span onClick={onStartEdit} style={{fontSize:fontSizeArray[headerLevel]}} className =\"noteText\"> {finalStructure} </span>\n    }catch(err){\n      var lineOutput = <span onClick={onStartEdit} style={{fontSize:fontSizeArray[headerLevel]}} className =\"noteText\"> {parsedLineContents} </span>\n\n    }\n\n\n    return lineOutput;\n  }\n\n  function markdownParser(lineContents, endSymbol){\n\n    var text = lineContents;\n    var stack = [];\n    var finalStructure;\n    while(text.length > 0 && text[0] !== endSymbol){\n      stack.push(text[0]);\n      text  = text.substr(1);\n      if(endSymbol !== '$' && (stack[stack.length - 1] === '%' || stack[stack.length - 1] === '`' || stack[stack.length - 1] === '$')){\n\n        var recursiveStructure;\n        [recursiveStructure, text] = markdownParser(text,stack[stack.length - 1]);\n\n        stack.pop(stack.length - 1)\n        finalStructure = <span>{finalStructure}<span>{stack}</span><span>{recursiveStructure}</span></span>;\n        stack = [];\n        text  = text.substr(1);\n      }\n    }\n\n    finalStructure = <span>{finalStructure}<span>{stack}</span></span>;\n\n\n    if(text == null || text.length === 0){\n      return [<span>{finalStructure}</span>,null];\n    }else{\n\n      if(endSymbol === '%'){\n        return [<b>{finalStructure}</b>,text];\n\n      }\n      if(endSymbol === '`'){\n        return [<i>{finalStructure}</i>,text];\n\n      }\n      if(endSymbol === '$'){\n\n        var latexScript =stack.join('');\n        return [<MathJax.Provider><MathJax.Node inline formula={latexScript} /></MathJax.Provider>,text];\n\n      }\n    }\n\n\n    return ['','']\n}\n\n}\n"]},"metadata":{},"sourceType":"module"}