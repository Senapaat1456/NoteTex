{"ast":null,"code":"import { Action } from './LineActions';\nconst initialState = {\n  lineCount: 1,\n  noteLines: [],\n  currentLine: {\n    lineContents: \"temp\"\n  }\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case Action.BeginEdit:\n      return { ...state,\n        currentLine: action.payload,\n        noteLines: state.noteLines.map(line => {\n          if (line.lineNumber === action.payload) {\n            return { ...line,\n              isEditing: true\n            };\n          } else {\n            return line;\n          }\n        })\n      };\n\n    case Action.EndEdit:\n      return { ...state,\n        noteLines: state.noteLines.map(line => {\n          if (line.lineNumber === action.payload.lineNumber) {\n            return { ...line,\n              isEditing: false\n            };\n          } else {\n            return line;\n          }\n        })\n      };\n\n    case Action.LoadLine:\n      return { ...state,\n        noteLines: [action.payload, ...state.noteLines]\n      };\n\n    case Action.IncrementLineCount:\n      return { ...state,\n        lineCount: Action.IncrementLineCount + 1\n      };\n\n    case Action.AddNewLine:\n      return { ...state,\n        noteLines: [...state.noteLines, {\n          lineNumber: state.lineCount + 1,\n          lineContents: \"\"\n        }],\n        lineCount: state.lineCount + 1\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/LineReducer.js"],"names":["Action","initialState","lineCount","noteLines","currentLine","lineContents","reducer","state","action","type","BeginEdit","payload","map","line","lineNumber","isEditing","EndEdit","LoadLine","IncrementLineCount","AddNewLine"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,eAArB;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,CADQ;AAEnBC,EAAAA,SAAS,EAAE,EAFQ;AAGnBC,EAAAA,WAAW,EAAE;AAACC,IAAAA,YAAY,EAAC;AAAd;AAHM,CAArB;;AAKA,SAASC,OAAT,CAAiBC,KAAK,GAAGN,YAAzB,EAAuCO,MAAvC,EAA8C;AAC5C,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKT,MAAM,CAACU,SAAZ;AACE,aAAM,EACH,GAAGH,KADA;AACOH,QAAAA,WAAW,EAACI,MAAM,CAACG,OAD1B;AAEHR,QAAAA,SAAS,EAAEI,KAAK,CAACJ,SAAN,CAAgBS,GAAhB,CAAoBC,IAAI,IAAG;AACpC,cAAGA,IAAI,CAACC,UAAL,KAAoBN,MAAM,CAACG,OAA9B,EAAsC;AACpC,mBAAM,EAAC,GAAGE,IAAJ;AAAUE,cAAAA,SAAS,EAAC;AAApB,aAAN;AACD,WAFD,MAGI;AACF,mBAAOF,IAAP;AACD;AACF,SAPU;AAFR,OAAN;;AAaF,SAAKb,MAAM,CAACgB,OAAZ;AACE,aAAM,EACH,GAAGT,KADA;AAEHJ,QAAAA,SAAS,EAAEI,KAAK,CAACJ,SAAN,CAAgBS,GAAhB,CAAoBC,IAAI,IAAG;AACpC,cAAGA,IAAI,CAACC,UAAL,KAAoBN,MAAM,CAACG,OAAP,CAAeG,UAAtC,EAAiD;AAC/C,mBAAM,EAAC,GAAGD,IAAJ;AAAUE,cAAAA,SAAS,EAAC;AAApB,aAAN;AACD,WAFD,MAGI;AACF,mBAAOF,IAAP;AACD;AACF,SAPU;AAFR,OAAN;;AAaD,SAAKb,MAAM,CAACiB,QAAZ;AACE,aAAM,EACJ,GAAGV,KADC;AAEJJ,QAAAA,SAAS,EAAE,CAACK,MAAM,CAACG,OAAR,EAAiB,GAAGJ,KAAK,CAACJ,SAA1B;AAFP,OAAN;;AAMF,SAAKH,MAAM,CAACkB,kBAAZ;AACC,aAAM,EACJ,GAAGX,KADC;AACML,QAAAA,SAAS,EAACF,MAAM,CAACkB,kBAAP,GAA0B;AAD1C,OAAN;;AAKF,SAAKlB,MAAM,CAACmB,UAAZ;AACE,aAAM,EACJ,GAAGZ,KADC;AAEHJ,QAAAA,SAAS,EAAE,CAAC,GAAGI,KAAK,CAACJ,SAAV,EAAqB;AAACW,UAAAA,UAAU,EAACP,KAAK,CAACL,SAAN,GAAgB,CAA5B;AAA8BG,UAAAA,YAAY,EAAC;AAA3C,SAArB,CAFR;AAGHH,QAAAA,SAAS,EAACK,KAAK,CAACL,SAAN,GAAgB;AAHvB,OAAN;;AAOF;AACE,aAAOK,KAAP;AApDJ;AAsDD;;AACD,eAAeD,OAAf","sourcesContent":["import {Action} from './LineActions';\nconst initialState = {\n  lineCount: 1,\n  noteLines: [],\n  currentLine: {lineContents:\"temp\"},\n}\nfunction reducer(state = initialState, action){\n  switch (action.type) {\n\n    case Action.BeginEdit:\n      return{\n         ...state, currentLine:action.payload,\n         noteLines: state.noteLines.map(line =>{\n           if(line.lineNumber === action.payload){\n             return{...line, isEditing:true};\n           }\n           else{\n             return line;\n           }\n         })\n       }\n\n\n    case Action.EndEdit:\n      return{\n         ...state,\n         noteLines: state.noteLines.map(line =>{\n           if(line.lineNumber === action.payload.lineNumber){\n             return{...line, isEditing:false};\n           }\n           else{\n             return line;\n           }\n         })\n       }\n\n\n     case Action.LoadLine:\n       return{\n         ...state,\n         noteLines: [action.payload, ...state.noteLines],\n       }\n\n\n     case Action.IncrementLineCount:\n      return{\n        ...state, lineCount:Action.IncrementLineCount+1\n      }\n\n\n    case Action.AddNewLine:\n      return{\n        ...state,\n         noteLines: [...state.noteLines, {lineNumber:state.lineCount+1,lineContents:\"\"}],\n         lineCount:state.lineCount+1\n      }\n\n\n    default:\n      return state;\n  }\n}\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}