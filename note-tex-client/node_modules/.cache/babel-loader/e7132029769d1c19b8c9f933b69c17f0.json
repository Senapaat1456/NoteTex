{"ast":null,"code":"import React, { useState, getState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { checkForErrors } from './UserActions';\nexport const LineAction = Object.freeze({\n  StartEdit: 'StartEdit',\n  EndEdit: 'EndEdit',\n  LoadLine: 'LoadLine',\n  IncrementLineCount: 'IncrementLineCount',\n  AddNewLine: 'AddNewLine',\n  RemoveLine: 'removeLine'\n});\nconst host = 'http://websystems.senapatiratne.com:1443';\nexport function startEdit(lineNumber) {\n  return {\n    type: LineAction.StartEdit,\n    payload: lineNumber\n  };\n}\nexport function beginEndEdit(noteLine, noteLines, currentLineCount, currentNoteSheet_id, currentUserName) {\n  if (currentUserName == null || currentUserName === \"\") {\n    return dispatch => {\n      dispatch(finishEndEdit(noteLine));\n    };\n  }\n\n  const compiledNoteLines = noteLines.map(line => {\n    if (line.lineNumber === noteLine.lineNumber) {\n      return noteLine;\n    } else {\n      return line;\n    }\n  });\n  return dispatch => {\n    const newBody = {\n      content: JSON.stringify(compiledNoteLines),\n      lineCount: currentLineCount,\n      noteSheet_id: currentNoteSheet_id,\n      userName: currentUserName\n    };\n    alert(\"Newbody:\" + JSON.stringify(newBody));\n    const options = {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: newBody\n    };\n    alert(\"options:\" + JSON.stringify(options));\n    return dispatch => {\n      fetch(`${host}/noteSheet`, JSON.stringify(options)).then(checkForErrors).then(responce => responce.json()).then(data => {\n        if (data.ok) {\n          dispatch(finishEndEdit(noteLine));\n        }\n      }).catch(e => console.error(e));\n    };\n  }; //dispatch(finishEndEdit(noteLine))\n}\nexport function finishEndEdit(noteLine) {\n  return {\n    type: LineAction.EndEdit,\n    payload: noteLine\n  };\n}\nexport function addNewLine(location) {\n  return {\n    type: LineAction.AddNewLine,\n    payload: location\n  };\n}\nexport function loadLine(noteLine) {\n  return {\n    type: LineAction.LoadLine,\n    payload: noteLine\n  };\n}\nexport function incrementLineCount() {\n  return {\n    type: LineAction.IncrementLineCount,\n    payload: null\n  };\n}\nexport function removeLine(noteLine) {\n  return {\n    type: LineAction.RemoveLine,\n    payload: noteLine\n  };\n}","map":{"version":3,"sources":["/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/LineActions.js"],"names":["React","useState","getState","useSelector","useDispatch","checkForErrors","LineAction","Object","freeze","StartEdit","EndEdit","LoadLine","IncrementLineCount","AddNewLine","RemoveLine","host","startEdit","lineNumber","type","payload","beginEndEdit","noteLine","noteLines","currentLineCount","currentNoteSheet_id","currentUserName","dispatch","finishEndEdit","compiledNoteLines","map","line","newBody","content","JSON","stringify","lineCount","noteSheet_id","userName","alert","options","method","headers","body","fetch","then","responce","json","data","ok","catch","e","console","error","addNewLine","location","loadLine","incrementLineCount","removeLine"],"mappings":"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","sourcesContent":["import React, {useState, getState} from 'react';\nimport {useSelector,useDispatch} from 'react-redux';\nimport {checkForErrors} from './UserActions'\n\nexport const LineAction = Object.freeze({\n  StartEdit: 'StartEdit',\n  EndEdit: 'EndEdit',\n  LoadLine: 'LoadLine',\n  IncrementLineCount: 'IncrementLineCount',\n  AddNewLine:'AddNewLine',\n  RemoveLine:'removeLine'\n})\n\nconst host = 'http://websystems.senapatiratne.com:1443';\n\n\nexport function startEdit(lineNumber){\n  return{\n    type: LineAction.StartEdit,\n    payload: lineNumber\n  };\n}\n\nexport function beginEndEdit(noteLine, noteLines, currentLineCount, currentNoteSheet_id,currentUserName){\n  if(currentUserName==null || currentUserName===\"\"){\n    return dispatch => {\n      dispatch(finishEndEdit(noteLine))\n    }\n  }\n  const compiledNoteLines = noteLines.map(line =>{\n       if(line.lineNumber === noteLine.lineNumber){\n         return noteLine;\n       }\n       else{\n         return line;\n       }\n     });\n  return dispatch => {\n    const newBody = {content:JSON.stringify(compiledNoteLines),lineCount:currentLineCount,noteSheet_id:currentNoteSheet_id,userName:currentUserName};\n    alert(\"Newbody:\"+JSON.stringify(newBody))\n    const options = {method: 'PATCH', headers:{'Content-Type': 'application/json'}, body:(newBody)};\n    alert(\"options:\"+JSON.stringify(options))\n    return dispatch => {\n      fetch(`${host}/noteSheet`,JSON.stringify(options))\n        .then(checkForErrors)\n        .then(responce => responce.json())\n        .then(data => {\n          if(data.ok){\n            dispatch(finishEndEdit(noteLine))\n          }\n        })\n        .catch(e => console.error(e));\n    };\n  };\n  //dispatch(finishEndEdit(noteLine))\n}\n\nexport function finishEndEdit(noteLine){\n  return{\n    type: LineAction.EndEdit,\n    payload: noteLine,\n  };\n}\n\nexport function addNewLine(location){\n    return{\n    type: LineAction.AddNewLine,\n    payload: location,\n  }\n}\n\nexport function loadLine(noteLine){\n  return {\n    type: LineAction.LoadLine,\n    payload: noteLine,\n  };\n}\n\nexport function incrementLineCount(){\n  return{\n    type: LineAction.IncrementLineCount,\n    payload: null\n  }\n}\n\nexport function removeLine(noteLine){\n  return{\n    type: LineAction.RemoveLine,\n    payload: noteLine\n  }\n}\n"]},"metadata":{},"sourceType":"module"}