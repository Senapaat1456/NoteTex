{"ast":null,"code":"import React, { useState } from 'react';\nexport const Action = Object.freeze({\n  BeginEdit: 'BeginEdit',\n  EndEdit: 'EndEdit',\n  LoadLine: 'LoadLine',\n  IncrementLineCount: 'IncrementLineCount',\n  AddNewLine: 'AddNewLine'\n});\nexport function beginEdit(lineNumber) {\n  return {\n    type: Action.BeginEdit,\n    payload: lineNumber\n  };\n}\nexport function endEdit(noteLine, lineCount) {\n  return {\n    type: Action.EndEdit,\n    payload: noteLine\n  };\n}\nexport function addNewLine(location) {\n  return {\n    type: Action.AddNewLine,\n    payload: location\n  };\n}\nexport function loadLine(noteLine) {\n  return {\n    type: Action.LoadLine,\n    payload: noteLine\n  };\n}\nexport function incrementLineCount() {\n  return {\n    type: Action.IncrementLineCount,\n    payload: null\n  };\n}\n/*export function newLine(noteLine){\n  return {\n    type: Action.LoadLine,\n    payload: loadLine,\n  };\n}*/\n\n/*export function newLine(){\n  return dispatch => {\n      dispatch(loadMemories(data.memories))\n    }\n  };\n}*/","map":{"version":3,"sources":["/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/LineActions.js"],"names":["React","useState","Action","Object","freeze","BeginEdit","EndEdit","LoadLine","IncrementLineCount","AddNewLine","beginEdit","lineNumber","type","payload","endEdit","noteLine","lineCount","addNewLine","location","loadLine","incrementLineCount"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,MAAMC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc;AAClCC,EAAAA,SAAS,EAAE,WADuB;AAElCC,EAAAA,OAAO,EAAE,SAFyB;AAGlCC,EAAAA,QAAQ,EAAE,UAHwB;AAIlCC,EAAAA,kBAAkB,EAAE,oBAJc;AAKlCC,EAAAA,UAAU,EAAC;AALuB,CAAd,CAAf;AAQP,OAAO,SAASC,SAAT,CAAmBC,UAAnB,EAA8B;AACnC,SAAM;AACJC,IAAAA,IAAI,EAAEV,MAAM,CAACG,SADT;AAEJQ,IAAAA,OAAO,EAAEF;AAFL,GAAN;AAID;AAED,OAAO,SAASG,OAAT,CAAiBC,QAAjB,EAA2BC,SAA3B,EAAqC;AAC1C,SAAM;AACJJ,IAAAA,IAAI,EAAEV,MAAM,CAACI,OADT;AAEJO,IAAAA,OAAO,EAAEE;AAFL,GAAN;AAID;AAED,OAAO,SAASE,UAAT,CAAoBC,QAApB,EAA6B;AAClC,SAAM;AACJN,IAAAA,IAAI,EAAEV,MAAM,CAACO,UADT;AAEJI,IAAAA,OAAO,EAAEK;AAFL,GAAN;AAID;AAED,OAAO,SAASC,QAAT,CAAkBJ,QAAlB,EAA2B;AAChC,SAAO;AACLH,IAAAA,IAAI,EAAEV,MAAM,CAACK,QADR;AAELM,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID;AAED,OAAO,SAASK,kBAAT,GAA6B;AAClC,SAAM;AACJR,IAAAA,IAAI,EAAEV,MAAM,CAACM,kBADT;AAEJK,IAAAA,OAAO,EAAE;AAFL,GAAN;AAID;AAED;;;;;;;AAOA","sourcesContent":["import React, {useState} from 'react';\nexport const Action = Object.freeze({\n  BeginEdit: 'BeginEdit',\n  EndEdit: 'EndEdit',\n  LoadLine: 'LoadLine',\n  IncrementLineCount: 'IncrementLineCount',\n  AddNewLine:'AddNewLine'\n})\n\nexport function beginEdit(lineNumber){\n  return{\n    type: Action.BeginEdit,\n    payload: lineNumber\n  };\n}\n\nexport function endEdit(noteLine, lineCount){\n  return{\n    type: Action.EndEdit,\n    payload: noteLine,\n  };\n}\n\nexport function addNewLine(location){\n  return{\n    type: Action.AddNewLine,\n    payload: location,\n  }\n}\n\nexport function loadLine(noteLine){\n  return {\n    type: Action.LoadLine,\n    payload: noteLine,\n  };\n}\n\nexport function incrementLineCount(){\n  return{\n    type: Action.IncrementLineCount,\n    payload: null\n  }\n}\n\n/*export function newLine(noteLine){\n  return {\n    type: Action.LoadLine,\n    payload: loadLine,\n  };\n}*/\n\n/*export function newLine(){\n  return dispatch => {\n      dispatch(loadMemories(data.memories))\n    }\n  };\n}*/\n"]},"metadata":{},"sourceType":"module"}