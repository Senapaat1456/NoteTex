{"ast":null,"code":"import { Action } from './LineActions';\nconst initialState = {\n  lineCount: 1,\n  noteLines: [],\n  currentLine: {\n    lineContents: \"temp\"\n  }\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case Action.BeginEdit:\n      return { ...state,\n        currentLine: action.payload,\n        noteLines: state.noteLines.map(line => {\n          if (line.lineNumber === action.payload) {\n            return { ...line,\n              isEditing: true\n            };\n          } else {\n            return line;\n          }\n        })\n      };\n\n    case Action.EndEdit:\n      return { ...state,\n        noteLines: state.noteLines.map(line => {\n          if (line.lineNumber === action.payload.lineNumber) {\n            return { ...line,\n              isEditing: false\n            };\n          } else {\n            return line;\n          }\n        })\n      };\n\n    case Action.LoadLine:\n      return { ...state,\n        noteLines: [action.payload, ...state.noteLines]\n      };\n\n    case Action.IncrementLineCount:\n      return { ...state,\n        lineCount: Action.IncrementLineCount + 1\n      };\n\n    /*case Action.AddNewLine:\n    const temp = {lineNumber:action.payload+1, lineContents:\"New Line...\", isEditing:true}\n      return{\n        ...state,\n         noteLines:[(state.noteLines.map(line =>{\n           if(line.lineNumber <= action.payload){\n             return{...line, lineNumber:line.lineNumber}\n           }\n           else{\n             return{...line, lineNumber:line.lineNumber+1}\n           }\n         })).push(temp)\n         ,lineCount:state.lineCount+1\n      }*/\n\n    case Action.AddNewLine:\n      console.log(\"Old: \" + JSON.stringify(state.noteLines) + \", type: \" + typeof state.noteLines);\n      const temp = {\n        lineNumber: action.payload + 1,\n        lineContents: \"\",\n        isEditing: true,\n        marked: \"new\"\n      };\n      const oldList = state.noteLines.map(line => {\n        console.log(\"a Line: \" + JSON.stringify(line));\n\n        if (line.lineNumber <= action.payload) {\n          var ii = line.lineNumber;\n          var contents = line.lineContents;\n          return {\n            lineContents: contents,\n            lineNumber: ii,\n            marked: \"under\"\n          };\n        } else {\n          var ii = line.lineNumber + 1;\n          var contents = line.lineContents;\n          return {\n            lineContents: contents,\n            lineNumber: ii,\n            marked: \"Over\"\n          };\n        }\n      });\n      console.log(\"New: \" + JSON.stringify(oldList) + \", type: \" + typeof oldList);\n      console.log(\"final: \" + JSON.stringify([oldList, temp].flat()));\n      return { ...state,\n        noteLines: [oldList, temp].flat(),\n        lineCount: state.lineCount + 1\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/LineReducer.js"],"names":["Action","initialState","lineCount","noteLines","currentLine","lineContents","reducer","state","action","type","BeginEdit","payload","map","line","lineNumber","isEditing","EndEdit","LoadLine","IncrementLineCount","AddNewLine","console","log","JSON","stringify","temp","marked","oldList","ii","contents","flat"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,eAArB;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,CADQ;AAEnBC,EAAAA,SAAS,EAAE,EAFQ;AAGnBC,EAAAA,WAAW,EAAE;AAACC,IAAAA,YAAY,EAAC;AAAd;AAHM,CAArB;;AAKA,SAASC,OAAT,CAAiBC,KAAK,GAAGN,YAAzB,EAAuCO,MAAvC,EAA8C;AAC5C,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKT,MAAM,CAACU,SAAZ;AACE,aAAM,EACH,GAAGH,KADA;AACOH,QAAAA,WAAW,EAACI,MAAM,CAACG,OAD1B;AAEHR,QAAAA,SAAS,EAAEI,KAAK,CAACJ,SAAN,CAAgBS,GAAhB,CAAoBC,IAAI,IAAG;AACpC,cAAGA,IAAI,CAACC,UAAL,KAAoBN,MAAM,CAACG,OAA9B,EAAsC;AACpC,mBAAM,EAAC,GAAGE,IAAJ;AAAUE,cAAAA,SAAS,EAAC;AAApB,aAAN;AACD,WAFD,MAGI;AACF,mBAAOF,IAAP;AACD;AACF,SAPU;AAFR,OAAN;;AAaF,SAAKb,MAAM,CAACgB,OAAZ;AACE,aAAM,EACH,GAAGT,KADA;AAEHJ,QAAAA,SAAS,EAAEI,KAAK,CAACJ,SAAN,CAAgBS,GAAhB,CAAoBC,IAAI,IAAG;AACpC,cAAGA,IAAI,CAACC,UAAL,KAAoBN,MAAM,CAACG,OAAP,CAAeG,UAAtC,EAAiD;AAC/C,mBAAM,EAAC,GAAGD,IAAJ;AAAUE,cAAAA,SAAS,EAAC;AAApB,aAAN;AACD,WAFD,MAGI;AACF,mBAAOF,IAAP;AACD;AACF,SAPU;AAFR,OAAN;;AAaD,SAAKb,MAAM,CAACiB,QAAZ;AACE,aAAM,EACJ,GAAGV,KADC;AAEJJ,QAAAA,SAAS,EAAE,CAACK,MAAM,CAACG,OAAR,EAAiB,GAAGJ,KAAK,CAACJ,SAA1B;AAFP,OAAN;;AAMF,SAAKH,MAAM,CAACkB,kBAAZ;AACC,aAAM,EACJ,GAAGX,KADC;AACML,QAAAA,SAAS,EAACF,MAAM,CAACkB,kBAAP,GAA0B;AAD1C,OAAN;;AAKF;;;;;;;;;;;;;;;AAeE,SAAKlB,MAAM,CAACmB,UAAZ;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAUC,IAAI,CAACC,SAAL,CAAehB,KAAK,CAACJ,SAArB,CAAV,GAA4C,UAA5C,GAAyD,OAAOI,KAAK,CAACJ,SAAlF;AACA,YAAMqB,IAAI,GAAG;AAACV,QAAAA,UAAU,EAACN,MAAM,CAACG,OAAP,GAAe,CAA3B;AAA8BN,QAAAA,YAAY,EAAC,EAA3C;AAA+CU,QAAAA,SAAS,EAAC,IAAzD;AAA+DU,QAAAA,MAAM,EAAC;AAAtE,OAAb;AACA,YAAMC,OAAO,GAAGnB,KAAK,CAACJ,SAAN,CAAgBS,GAAhB,CAAoBC,IAAI,IAAG;AAEzCO,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAYC,IAAI,CAACC,SAAL,CAAeV,IAAf,CAAxB;;AAEA,YAAGA,IAAI,CAACC,UAAL,IAAmBN,MAAM,CAACG,OAA7B,EAAqC;AAEjC,cAAIgB,EAAE,GAAGd,IAAI,CAACC,UAAd;AACF,cAAIc,QAAQ,GAAGf,IAAI,CAACR,YAApB;AACA,iBAAO;AAACA,YAAAA,YAAY,EAACuB,QAAd;AAAwBd,YAAAA,UAAU,EAACa,EAAnC;AAAuCF,YAAAA,MAAM,EAAC;AAA9C,WAAP;AAED,SAND,MAOI;AAEF,cAAIE,EAAE,GAAGd,IAAI,CAACC,UAAL,GAAgB,CAAzB;AACA,cAAIc,QAAQ,GAAGf,IAAI,CAACR,YAApB;AACA,iBAAM;AAACA,YAAAA,YAAY,EAACuB,QAAd;AAAwBd,YAAAA,UAAU,EAACa,EAAnC;AAAuCF,YAAAA,MAAM,EAAC;AAA9C,WAAN;AAED;AACF,OAlBe,CAAhB;AAmBAL,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAUC,IAAI,CAACC,SAAL,CAAeG,OAAf,CAAV,GAAoC,UAApC,GAAiD,OAAOA,OAApE;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAYC,IAAI,CAACC,SAAL,CAAgB,CAACG,OAAD,EAASF,IAAT,CAAD,CAAiBK,IAAjB,EAAf,CAAxB;AACA,aAAM,EACJ,GAAGtB,KADC;AAEHJ,QAAAA,SAAS,EAAE,CAACuB,OAAD,EAASF,IAAT,CAAD,CAAiBK,IAAjB,EAFP;AAGF3B,QAAAA,SAAS,EAACK,KAAK,CAACL,SAAN,GAAgB;AAHxB,OAAN;;AAOJ;AACE,aAAOK,KAAP;AA1FJ;AA4FD;;AACD,eAAeD,OAAf","sourcesContent":["import {Action} from './LineActions';\nconst initialState = {\n  lineCount: 1,\n  noteLines: [],\n  currentLine: {lineContents:\"temp\"},\n}\nfunction reducer(state = initialState, action){\n  switch (action.type) {\n\n    case Action.BeginEdit:\n      return{\n         ...state, currentLine:action.payload,\n         noteLines: state.noteLines.map(line =>{\n           if(line.lineNumber === action.payload){\n             return{...line, isEditing:true};\n           }\n           else{\n             return line;\n           }\n         })\n       }\n\n\n    case Action.EndEdit:\n      return{\n         ...state,\n         noteLines: state.noteLines.map(line =>{\n           if(line.lineNumber === action.payload.lineNumber){\n             return{...line, isEditing:false};\n           }\n           else{\n             return line;\n           }\n         })\n       }\n\n\n     case Action.LoadLine:\n       return{\n         ...state,\n         noteLines: [action.payload, ...state.noteLines],\n       }\n\n\n     case Action.IncrementLineCount:\n      return{\n        ...state, lineCount:Action.IncrementLineCount+1\n      }\n\n\n    /*case Action.AddNewLine:\n    const temp = {lineNumber:action.payload+1, lineContents:\"New Line...\", isEditing:true}\n      return{\n        ...state,\n         noteLines:[(state.noteLines.map(line =>{\n           if(line.lineNumber <= action.payload){\n             return{...line, lineNumber:line.lineNumber}\n           }\n           else{\n             return{...line, lineNumber:line.lineNumber+1}\n           }\n         })).push(temp)\n         ,lineCount:state.lineCount+1\n      }*/\n\n      case Action.AddNewLine:\n        console.log(\"Old: \" + JSON.stringify(state.noteLines) + \", type: \" + typeof(state.noteLines));\n        const temp = {lineNumber:action.payload+1, lineContents:\"\", isEditing:true, marked:\"new\"}\n        const oldList = state.noteLines.map(line =>{\n\n          console.log(\"a Line: \"+ JSON.stringify(line))\n\n          if(line.lineNumber <= action.payload){\n\n              var ii = line.lineNumber;\n            var contents = line.lineContents;\n            return {lineContents:contents, lineNumber:ii, marked:\"under\"}\n\n          }\n          else{\n\n            var ii = line.lineNumber+1;\n            var contents = line.lineContents;\n            return{lineContents:contents, lineNumber:ii, marked:\"Over\"}\n\n          }\n        })\n        console.log(\"New: \" + JSON.stringify(oldList) + \", type: \" + typeof(oldList));\n        console.log(\"final: \" + JSON.stringify(([oldList,temp]).flat()))\n        return{\n          ...state,\n           noteLines:([oldList,temp]).flat()\n           ,lineCount:state.lineCount+1\n        }\n\n\n    default:\n      return state;\n  }\n}\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}