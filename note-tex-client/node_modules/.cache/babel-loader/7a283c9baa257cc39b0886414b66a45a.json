{"ast":null,"code":"var _jsxFileName = \"/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/NoteLine.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector, useStore } from 'react-redux';\nimport { beginEdit, endEdit, addNewLine } from './LineActions';\nimport ReactDOMServer from 'react-dom/server';\nimport './noteLine.css'; //import {parseLine} from './lineParser'\n\nexport function NoteLine(props) {\n  //console.log(\"this line: \" + JSON.stringify(props.noteLine) + \", Important: \" + props.noteLine.lineContents)\n  const noteLine = props.noteLine;\n  const dispatch = useDispatch();\n  const [lineContents, setLineContents] = useState(noteLine.lineContents); //console.log(\"actual: \" + lineContents)\n  //useEffect(() => doSth(lineContents))\n\n  const lineCount = props.lineCount;\n\n  const onBeginEdit = () => {\n    //alert(lineContents + \" , \" + noteLine.lineContents)\n    dispatch(beginEdit(noteLine.lineNumber));\n  };\n\n  const onEndEdit = typeOfExit => {\n    //alert(lineContents)\n    dispatch(endEdit({\n      lineNumber: noteLine.lineNumber,\n      lineContents: lineContents\n    })); //alert(lineContents)\n\n    if (lineContents !== \"\" && typeOfExit === \"ENTER\") {\n      dispatch(addNewLine(noteLine.lineNumber));\n    }\n  };\n\n  const onUpArrow = () => {\n    if (noteLine.lineNumber != 1) {\n      dispatch(endEdit({\n        lineNumber: noteLine.lineNumber,\n        lineContents: lineContents\n      }));\n      dispatch(beginEdit(noteLine.lineNumber - 1));\n    }\n  };\n\n  const onDownArrow = () => {\n    if (noteLine.lineNumber != lineCount) {\n      dispatch(endEdit({\n        lineNumber: noteLine.lineNumber,\n        lineContents: lineContents\n      }));\n      dispatch(beginEdit(noteLine.lineNumber + 1));\n    }\n  };\n\n  const processesKeyPress = keyCode => {\n    if (keyCode === 13) {\n      onEndEdit(\"ENTER\");\n    } else if (keyCode === 38) {\n      onUpArrow();\n    } else if (keyCode === 40) {\n      onDownArrow();\n    }\n  };\n\n  const input = 'This **textbolded** a header';\n\n  if (noteLine.isEditing) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"lineArea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }, \">\", /*#__PURE__*/React.createElement(\"input\", {\n      className: \"lineBox\",\n      contentEditable: \"true\",\n      value: lineContents,\n      onBlur: () => onEndEdit(\"CURSER\"),\n      onKeyDown: event => processesKeyPress(event.keyCode),\n      onChange: e => {\n        setLineContents(e.target.value);\n      },\n      ref: input => input && input.focus(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 10\n      }\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: \"lineArea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, parseLine(noteLine.lineContents));\n  } //\n  //<ReactMarkdown source={input}/>\n\n\n  function parseLine(lineContents) {\n    var parsedLineContents = lineContents; //parsing header info\n\n    var fontSizeArray = [12, 24, 20, 16];\n    var headerLevel = 0;\n\n    if (parsedLineContents[0] === '#') {\n      headerLevel = 1;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n\n    if (parsedLineContents[0] === '#') {\n      headerLevel = 2;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n\n    if (parsedLineContents[0] === '#') {\n      headerLevel = 3;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n    /*do{\n      var tracker = parsedLineContents;\n     }while(tracker != parsedLineContents)\n    */\n    //parsedLineContents = parsedLineContents.replace(\"**\" , \"<b>\");\n\n\n    var finalStructure, x; //var ReactDOMServer = require('react-dom/server');\n\n    [finalStructure, x] = markdownParser(parsedLineContents, null);\n    alert(lineContents + \" : \" + ReactDOMServer.renderToStaticMarkup(finalStructure));\n    var lineOutput = /*#__PURE__*/React.createElement(\"div\", {\n      onClick: onBeginEdit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 22\n      }\n    }, \" > \", /*#__PURE__*/React.createElement(\"span\", {\n      onClick: onBeginEdit,\n      style: {\n        fontSize: fontSizeArray[headerLevel]\n      },\n      className: \"noteText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 52\n      }\n    }, \" \", finalStructure, \" \"), \" \");\n    return lineOutput;\n  }\n\n  function markdownParser(lineContents, endSymbol) {\n    //var ReactDOMServer = require('react-dom/server');\n    var text = lineContents;\n    var stack = [];\n    var finalStructure;\n\n    while (text.length > 0 && text[0] !== endSymbol) {\n      //alert(\"Char: \" +   text[0]);\n      stack.push(text[0]);\n      text = text.substr(1); //alert(\"Char: \" + stack[stack.length - 1]);\n\n      if (stack[stack.length - 1] === '#') {\n        //alert(\"pound found\");\n        stack.pop(stack.length - 1);\n        var recursiveStructure;\n        [recursiveStructure, text] = markdownParser(text, '#'); //alert(\"Sending: \" + text + \", looking for:\" + '#')\n\n        finalStructure = /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 26\n          }\n        }, \" \", finalStructure, \" \", /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 50\n          }\n        }, \" \", stack, \" \"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 73\n          }\n        }, \" \", recursiveStructure, \" \"), \" \");\n        stack = [];\n        text = text.substr(1);\n      }\n    }\n\n    finalStructure = /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 22\n      }\n    }, \" \", finalStructure, \" \", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 46\n      }\n    }, \" \", stack, \" \"));\n\n    if (text == null || text.length === 0) {\n      //alert(\"returning: \" +  ReactDOMServer.renderToStaticMarkup(<span> {finalStructure} </span>))\n      return [/*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }\n      }, \" \", finalStructure, \" \"), null];\n    } else {\n      if (endSymbol === '#') {\n        //alert(\"returning: \" +  ReactDOMServer.renderToStaticMarkup(<b>{finalStructure}</b>))\n        return [/*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 17\n          }\n        }, finalStructure), text];\n      }\n    }\n\n    return ['', ''];\n  }\n  /*function markdownParserRecursive(lineContents,endSymbol){\n    var returnStack = []\n    while(lineContents.length > 0 && lineContents[0] != endSymbol){\n     }\n  }*/\n\n}","map":{"version":3,"sources":["/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/NoteLine.js"],"names":["React","useEffect","useState","useDispatch","useSelector","useStore","beginEdit","endEdit","addNewLine","ReactDOMServer","NoteLine","props","noteLine","dispatch","lineContents","setLineContents","lineCount","onBeginEdit","lineNumber","onEndEdit","typeOfExit","onUpArrow","onDownArrow","processesKeyPress","keyCode","input","isEditing","event","e","target","value","focus","parseLine","parsedLineContents","fontSizeArray","headerLevel","substr","finalStructure","x","markdownParser","alert","renderToStaticMarkup","lineOutput","fontSize","endSymbol","text","stack","length","push","pop","recursiveStructure"],"mappings":"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","sourcesContent":["import React, {useEffect,useState} from 'react';\nimport {useDispatch, useSelector, useStore} from 'react-redux';\nimport {beginEdit, endEdit, addNewLine} from './LineActions'\nimport ReactDOMServer from 'react-dom/server';\nimport './noteLine.css';\n//import {parseLine} from './lineParser'\n\n\n\nexport function NoteLine(props){\n  //console.log(\"this line: \" + JSON.stringify(props.noteLine) + \", Important: \" + props.noteLine.lineContents)\n  const noteLine = props.noteLine;\n  const dispatch = useDispatch();\n  const [lineContents, setLineContents] = useState(noteLine.lineContents);\n  //console.log(\"actual: \" + lineContents)\n  //useEffect(() => doSth(lineContents))\n  const lineCount = props.lineCount\n\n  const onBeginEdit = () =>{\n    //alert(lineContents + \" , \" + noteLine.lineContents)\n    dispatch(beginEdit(noteLine.lineNumber));\n  }\n\n  const onEndEdit = (typeOfExit) =>{\n    //alert(lineContents)\n    dispatch(endEdit({lineNumber:noteLine.lineNumber, lineContents:lineContents}));\n    //alert(lineContents)\n    if(lineContents !== \"\" && typeOfExit === \"ENTER\"){\n      dispatch(addNewLine(noteLine.lineNumber));\n    }\n  }\n\nconst onUpArrow = () => {\n  if(noteLine.lineNumber != 1){\n    dispatch(endEdit({lineNumber:noteLine.lineNumber, lineContents:lineContents}));\n    dispatch(beginEdit(noteLine.lineNumber - 1));\n  }\n}\n\nconst onDownArrow = () => {\n  if(noteLine.lineNumber != lineCount){\n    dispatch(endEdit({lineNumber:noteLine.lineNumber, lineContents:lineContents}));\n    dispatch(beginEdit(noteLine.lineNumber + 1));\n  }\n}\n\n\nconst processesKeyPress = (keyCode) =>{\n  if(keyCode === 13){\n    onEndEdit(\"ENTER\");\n  }\n  else if(keyCode === 38){\n    onUpArrow();\n  }\n  else if(keyCode === 40){\n    onDownArrow();\n  }\n\n}\n  const input = 'This **textbolded** a header';\n  if(noteLine.isEditing){\n    return(\n      <span className=\"lineArea\">\n        ><input className=\"lineBox\" contentEditable=\"true\"  value={lineContents} onBlur={() => onEndEdit(\"CURSER\")} onKeyDown={event => processesKeyPress(event.keyCode)} onChange={e => {setLineContents(e.target.value)}} ref={input => input && input.focus()}/>\n      </span>\n    )\n  }else{\n    return(\n      <span className=\"lineArea\">\n        {parseLine(noteLine.lineContents)}\n      </span>\n    )\n  }\n  //\n  //<ReactMarkdown source={input}/>\n\n\n  function parseLine(lineContents){\n    var parsedLineContents = lineContents;\n\n    //parsing header info\n    var fontSizeArray = [12,24,20,16]\n    var headerLevel = 0;\n    if(parsedLineContents[0] === '#'){\n      headerLevel = 1;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n    if(parsedLineContents[0] === '#'){\n      headerLevel = 2;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n    if(parsedLineContents[0] === '#'){\n      headerLevel = 3;\n      parsedLineContents = parsedLineContents.substr(1);\n    }\n\n\n    /*do{\n      var tracker = parsedLineContents;\n\n    }while(tracker != parsedLineContents)\n    */\n\n    //parsedLineContents = parsedLineContents.replace(\"**\" , \"<b>\");\n    var finalStructure, x;\n    //var ReactDOMServer = require('react-dom/server');\n    [finalStructure, x] = markdownParser(parsedLineContents,null);\n    alert(lineContents + \" : \" + ReactDOMServer.renderToStaticMarkup(finalStructure))\n    var lineOutput = <div onClick={onBeginEdit}> > <span onClick={onBeginEdit} style={{fontSize:fontSizeArray[headerLevel]}} className =\"noteText\"> {finalStructure} </span> </div>\n\n\n\n    return lineOutput;\n  }\n\n  function markdownParser(lineContents, endSymbol){\n    //var ReactDOMServer = require('react-dom/server');\n\n    var text = lineContents;\n    var stack = [];\n    var finalStructure;\n\n    while(text.length > 0 && text[0] !== endSymbol){\n      //alert(\"Char: \" +   text[0]);\n      stack.push(text[0]);\n      text  = text.substr(1);\n      //alert(\"Char: \" + stack[stack.length - 1]);\n      if(stack[stack.length - 1] === '#'){\n        //alert(\"pound found\");\n        stack.pop(stack.length - 1)\n        var recursiveStructure;\n        [recursiveStructure, text] = markdownParser(text,'#');\n        //alert(\"Sending: \" + text + \", looking for:\" + '#')\n        finalStructure = <span> {finalStructure} <span> {stack} </span> <span> {recursiveStructure} </span> </span>;\n        stack = [];\n        text  = text.substr(1);\n      }\n    }\n\n    finalStructure = <span> {finalStructure} <span> {stack} </span></span>;\n\n\n    if(text == null || text.length === 0){\n      //alert(\"returning: \" +  ReactDOMServer.renderToStaticMarkup(<span> {finalStructure} </span>))\n      return [<span> {finalStructure} </span>,null];\n    }else{\n\n      if(endSymbol === '#'){\n        //alert(\"returning: \" +  ReactDOMServer.renderToStaticMarkup(<b>{finalStructure}</b>))\n        return [<b>{finalStructure}</b>,text];\n\n      }\n    }\n\n\n    return ['','']\n}\n\n  /*function markdownParserRecursive(lineContents,endSymbol){\n    var returnStack = []\n    while(lineContents.length > 0 && lineContents[0] != endSymbol){\n\n    }\n  }*/\n\n}\n"]},"metadata":{},"sourceType":"module"}