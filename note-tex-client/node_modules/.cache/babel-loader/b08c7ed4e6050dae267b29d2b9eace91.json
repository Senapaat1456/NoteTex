{"ast":null,"code":"import React, { useState, getState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nexport const LineAction = Object.freeze({\n  StartEdit: 'StartEdit',\n  EndEdit: 'EndEdit',\n  LoadLine: 'LoadLine',\n  IncrementLineCount: 'IncrementLineCount',\n  AddNewLine: 'AddNewLine',\n  RemoveLine: 'removeLine'\n});\nexport function startEdit(lineNumber) {\n  return {\n    type: LineAction.StartEdit,\n    payload: lineNumber\n  };\n}\nexport function beginEndEdit(noteLine, noteLines, lineCount, noteSheet_id, userName) {\n  const compiledNoteLines = noteLines.map(line => {\n    if (line.lineNumber === noteLine.lineNumber) {\n      return noteLine;\n    } else {\n      return line;\n    }\n  });\n  return dispatch => {\n    const newBody = {\n      content: compiledNoteLines,\n      lineCount: lineCount,\n      noteSheet_id: noteSheet_id,\n      userName: userName\n    };\n    const options = {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newBody)\n    };\n    return dispatch => {\n      fetch(`${host}/noteSheet`, options).then(checkForErrors).then(responce => responce.json()).then(data => {\n        if (data.ok) {\n          dispatch(finishEndEdit(noteLine));\n        }\n      }).catch(e => console.error(e));\n    };\n  }; //dispatch(finishEndEdit(noteLine))\n}\nexport function finishEndEdit(noteLine) {\n  return {\n    type: LineAction.EndEdit,\n    payload: noteLine\n  };\n}\nexport function addNewLine(location) {\n  return {\n    type: LineAction.AddNewLine,\n    payload: location\n  };\n}\nexport function loadLine(noteLine) {\n  return {\n    type: LineAction.LoadLine,\n    payload: noteLine\n  };\n}\nexport function incrementLineCount() {\n  return {\n    type: LineAction.IncrementLineCount,\n    payload: null\n  };\n}\nexport function removeLine(noteLine) {\n  return {\n    type: LineAction.RemoveLine,\n    payload: noteLine\n  };\n}","map":{"version":3,"sources":["/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/LineActions.js"],"names":["React","useState","getState","useSelector","useDispatch","LineAction","Object","freeze","StartEdit","EndEdit","LoadLine","IncrementLineCount","AddNewLine","RemoveLine","startEdit","lineNumber","type","payload","beginEndEdit","noteLine","noteLines","lineCount","noteSheet_id","userName","compiledNoteLines","map","line","dispatch","newBody","content","options","method","headers","body","JSON","stringify","fetch","host","then","checkForErrors","responce","json","data","ok","finishEndEdit","catch","e","console","error","addNewLine","location","loadLine","incrementLineCount","removeLine"],"mappings":"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","sourcesContent":["import React, {useState, getState} from 'react';\nimport {useSelector,useDispatch} from 'react-redux';\n\nexport const LineAction = Object.freeze({\n  StartEdit: 'StartEdit',\n  EndEdit: 'EndEdit',\n  LoadLine: 'LoadLine',\n  IncrementLineCount: 'IncrementLineCount',\n  AddNewLine:'AddNewLine',\n  RemoveLine:'removeLine'\n})\n\nexport function startEdit(lineNumber){\n  return{\n    type: LineAction.StartEdit,\n    payload: lineNumber\n  };\n}\n\nexport function beginEndEdit(noteLine, noteLines, lineCount, noteSheet_id,userName){\n  const compiledNoteLines = noteLines.map(line =>{\n       if(line.lineNumber === noteLine.lineNumber){\n         return noteLine;\n       }\n       else{\n         return line;\n       }\n     });\n  return dispatch => {\n    const newBody = {content:compiledNoteLines,lineCount:lineCount,noteSheet_id:noteSheet_id,userName:userName};\n    const options = {method: 'PATCH', headers:{'Content-Type': 'application/json'}, body:JSON.stringify(newBody)};\n    return dispatch => {\n      fetch(`${host}/noteSheet`,options)\n        .then(checkForErrors)\n        .then(responce => responce.json())\n        .then(data => {\n          if(data.ok){\n            dispatch(finishEndEdit(noteLine))\n          }\n        })\n        .catch(e => console.error(e));\n    };\n  };\n  //dispatch(finishEndEdit(noteLine))\n}\n\nexport function finishEndEdit(noteLine){\n  return{\n    type: LineAction.EndEdit,\n    payload: noteLine,\n  };\n}\n\nexport function addNewLine(location){\n    return{\n    type: LineAction.AddNewLine,\n    payload: location,\n  }\n}\n\nexport function loadLine(noteLine){\n  return {\n    type: LineAction.LoadLine,\n    payload: noteLine,\n  };\n}\n\nexport function incrementLineCount(){\n  return{\n    type: LineAction.IncrementLineCount,\n    payload: null\n  }\n}\n\nexport function removeLine(noteLine){\n  return{\n    type: LineAction.RemoveLine,\n    payload: noteLine\n  }\n}\n"]},"metadata":{},"sourceType":"module"}