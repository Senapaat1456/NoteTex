{"ast":null,"code":"import React, { useState, getState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nexport const LineAction = Object.freeze({\n  StartEdit: 'StartEdit',\n  EndEdit: 'EndEdit',\n  LoadLine: 'LoadLine',\n  IncrementLineCount: 'IncrementLineCount',\n  AddNewLine: 'AddNewLine',\n  RemoveLine: 'removeLine'\n});\nexport function startEdit(lineNumber) {\n  return {\n    type: LineAction.StartEdit,\n    payload: lineNumber\n  };\n}\nexport function beginEndEdit(noteLine, noteLines) {\n  const compiledNoteLines = noteLines.map(line => {\n    if (line.lineNumber === action.payload.lineNumber) {\n      return noteLine;\n    } else {\n      return line;\n    }\n  });\n  alert(JSON.stringify(compiledNoteLines));\n  return dispatch => {\n    /*fetch(`${host}/noteSheetList/${userName}`)\n      .then(checkForErrors)\n      .then(responce => responce.json())\n      .then(data => {\n        if(data.ok){\n          dispatch(finishLogin(data.usersNoteSheets,userName));\n        }\n        else{\n          alert(\"Login Failed\");\n        }\n      })\n      .catch(e => console.error(e));*/\n    dispatch(finishEndEdit(noteLine));\n  }; //dispatch(finishEndEdit(noteLine))\n}\nexport function finishEndEdit(noteLine) {\n  return {\n    type: LineAction.EndEdit,\n    payload: noteLine\n  };\n}\nexport function addNewLine(location) {\n  return {\n    type: LineAction.AddNewLine,\n    payload: location\n  };\n}\nexport function loadLine(noteLine) {\n  return {\n    type: LineAction.LoadLine,\n    payload: noteLine\n  };\n}\nexport function incrementLineCount() {\n  return {\n    type: LineAction.IncrementLineCount,\n    payload: null\n  };\n}\nexport function removeLine(noteLine) {\n  return {\n    type: LineAction.RemoveLine,\n    payload: noteLine\n  };\n}","map":{"version":3,"sources":["/home/andrew/School/Spring_2020/WebSystems/NoteTex/note-tex-client/src/LineActions.js"],"names":["React","useState","getState","useSelector","useDispatch","LineAction","Object","freeze","StartEdit","EndEdit","LoadLine","IncrementLineCount","AddNewLine","RemoveLine","startEdit","lineNumber","type","payload","beginEndEdit","noteLine","noteLines","compiledNoteLines","map","line","action","alert","JSON","stringify","dispatch","finishEndEdit","addNewLine","location","loadLine","incrementLineCount","removeLine"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,SAAQC,WAAR,EAAoBC,WAApB,QAAsC,aAAtC;AAEA,OAAO,MAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc;AACtCC,EAAAA,SAAS,EAAE,WAD2B;AAEtCC,EAAAA,OAAO,EAAE,SAF6B;AAGtCC,EAAAA,QAAQ,EAAE,UAH4B;AAItCC,EAAAA,kBAAkB,EAAE,oBAJkB;AAKtCC,EAAAA,UAAU,EAAC,YAL2B;AAMtCC,EAAAA,UAAU,EAAC;AAN2B,CAAd,CAAnB;AASP,OAAO,SAASC,SAAT,CAAmBC,UAAnB,EAA8B;AACnC,SAAM;AACJC,IAAAA,IAAI,EAAEX,UAAU,CAACG,SADb;AAEJS,IAAAA,OAAO,EAAEF;AAFL,GAAN;AAID;AAED,OAAO,SAASG,YAAT,CAAsBC,QAAtB,EAAgCC,SAAhC,EAA0C;AAC/C,QAAMC,iBAAiB,GAAGD,SAAS,CAACE,GAAV,CAAcC,IAAI,IAAG;AAC1C,QAAGA,IAAI,CAACR,UAAL,KAAoBS,MAAM,CAACP,OAAP,CAAeF,UAAtC,EAAiD;AAC/C,aAAOI,QAAP;AACD,KAFD,MAGI;AACF,aAAOI,IAAP;AACD;AACF,GAPsB,CAA1B;AAQAE,EAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeN,iBAAf,CAAD,CAAL;AACA,SAAOO,QAAQ,IAAI;AACf;;;;;;;;;;;;AAYEA,IAAAA,QAAQ,CAACC,aAAa,CAACV,QAAD,CAAd,CAAR;AACL,GAdD,CAV+C,CAyB/C;AACD;AAED,OAAO,SAASU,aAAT,CAAuBV,QAAvB,EAAgC;AACrC,SAAM;AACJH,IAAAA,IAAI,EAAEX,UAAU,CAACI,OADb;AAEJQ,IAAAA,OAAO,EAAEE;AAFL,GAAN;AAID;AAED,OAAO,SAASW,UAAT,CAAoBC,QAApB,EAA6B;AAChC,SAAM;AACNf,IAAAA,IAAI,EAAEX,UAAU,CAACO,UADX;AAENK,IAAAA,OAAO,EAAEc;AAFH,GAAN;AAIH;AAED,OAAO,SAASC,QAAT,CAAkBb,QAAlB,EAA2B;AAChC,SAAO;AACLH,IAAAA,IAAI,EAAEX,UAAU,CAACK,QADZ;AAELO,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID;AAED,OAAO,SAASc,kBAAT,GAA6B;AAClC,SAAM;AACJjB,IAAAA,IAAI,EAAEX,UAAU,CAACM,kBADb;AAEJM,IAAAA,OAAO,EAAE;AAFL,GAAN;AAID;AAED,OAAO,SAASiB,UAAT,CAAoBf,QAApB,EAA6B;AAClC,SAAM;AACJH,IAAAA,IAAI,EAAEX,UAAU,CAACQ,UADb;AAEJI,IAAAA,OAAO,EAAEE;AAFL,GAAN;AAID","sourcesContent":["import React, {useState, getState} from 'react';\nimport {useSelector,useDispatch} from 'react-redux';\n\nexport const LineAction = Object.freeze({\n  StartEdit: 'StartEdit',\n  EndEdit: 'EndEdit',\n  LoadLine: 'LoadLine',\n  IncrementLineCount: 'IncrementLineCount',\n  AddNewLine:'AddNewLine',\n  RemoveLine:'removeLine'\n})\n\nexport function startEdit(lineNumber){\n  return{\n    type: LineAction.StartEdit,\n    payload: lineNumber\n  };\n}\n\nexport function beginEndEdit(noteLine, noteLines){\n  const compiledNoteLines = noteLines.map(line =>{\n       if(line.lineNumber === action.payload.lineNumber){\n         return noteLine;\n       }\n       else{\n         return line;\n       }\n     });\n  alert(JSON.stringify(compiledNoteLines))\n  return dispatch => {\n      /*fetch(`${host}/noteSheetList/${userName}`)\n        .then(checkForErrors)\n        .then(responce => responce.json())\n        .then(data => {\n          if(data.ok){\n            dispatch(finishLogin(data.usersNoteSheets,userName));\n          }\n          else{\n            alert(\"Login Failed\");\n          }\n        })\n        .catch(e => console.error(e));*/\n        dispatch(finishEndEdit(noteLine))\n  };\n  //dispatch(finishEndEdit(noteLine))\n}\n\nexport function finishEndEdit(noteLine){\n  return{\n    type: LineAction.EndEdit,\n    payload: noteLine,\n  };\n}\n\nexport function addNewLine(location){\n    return{\n    type: LineAction.AddNewLine,\n    payload: location,\n  }\n}\n\nexport function loadLine(noteLine){\n  return {\n    type: LineAction.LoadLine,\n    payload: noteLine,\n  };\n}\n\nexport function incrementLineCount(){\n  return{\n    type: LineAction.IncrementLineCount,\n    payload: null\n  }\n}\n\nexport function removeLine(noteLine){\n  return{\n    type: LineAction.RemoveLine,\n    payload: noteLine\n  }\n}\n"]},"metadata":{},"sourceType":"module"}